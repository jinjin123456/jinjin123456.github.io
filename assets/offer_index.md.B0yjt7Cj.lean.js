import{_ as g,c as o,o as y,ae as n,j as i,a,t as l}from"./chunks/framework.Cd-3tpCq.js";const c="/assets/%E5%8C%85%E5%90%AB%E5%86%85%E9%83%A8%E6%B5%AE%E5%8A%A8.VAigAfRi.png",F="/assets/%E4%B8%8D%E5%92%8C%E5%90%8E%E5%8F%B0margin%E5%90%88%E5%B9%B6.C46ogCwY.png",u="/assets/%E6%8E%92%E9%99%A4%E5%A4%96%E9%83%A8%E6%B5%AE%E5%8A%A8.Bj5AELMC.png",C="/assets/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E5%9B%BE%E8%A7%A3.B4it7Xwz.png",A="/assets/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%B0%8F%E7%BB%93.D7o1Ut43.png",D="/assets/constlet%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.Cdfj0Wdl.png",B="/assets/%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C1.D9EN67ip.png",b="/assets/%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC%E7%9A%84%E5%9D%91.BrCDTdP2.png",m="/assets/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.Bmk7b177.png",v="/assets/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C4%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%9B%BE%E8%A7%A3.CtUdvPYr.png",f="/assets/HTTPS%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E9%AA%8C%E8%AF%81%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E5%9B%BE%E8%A7%A3.DJi2YB7R.png",x="/assets/%E9%87%8D%E5%AE%9A%E5%90%91%E5%AF%B9SEO%E7%9A%84%E5%BD%B1%E5%93%8D.r7-BXj9Z.png",q="/assets/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.BOu-bH1b.png",V="/assets/Vue3%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96._X4ZwQf9.png",w="/assets/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%9B%BE%E8%A7%A3.Dhnadh70.png",P="/assets/sleepGenerator.d1HgMX_S.png",j="/assets/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3.Boih4cdV.webp",S="/assets/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F_%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.Bg2yC4mV.png",L=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"offer/index.md","filePath":"offer/index.md"}'),_={name:"offer/index.md"};function M(t,s,T,I,O,R){var h,k,p,e,E,r,d;return y(),o("div",null,[s[72]||(s[72]=n("",650)),i("ul",null,[s[14]||(s[14]=i("li",null,[i("p",null,[a("以一个组件初次渲染为例："),i("strong",null,"初始化阶段，"),a(" Vue 会遍历 "),i("code",null,"data"),a(" 选项的所有属性，并使用 "),i("code",null,"Object.defineProperty"),a(" 将它们转换为 "),i("code",null,"getter"),a(" 和 "),i("code",null,"setter"),a("。在getter阶段收集依赖，在setter阶段触发更新；")])],-1)),i("li",null,[i("p",null,[s[0]||(s[0]=n("",15)),i("code",null,l((h=t.user)==null?void 0:h.name),1),s[1]||(s[1]=n("",35))]),s[13]||(s[13]=n("",1)),i("p",null,[s[2]||(s[2]=a("渲染函数会继续执行，读取所有在模板中用到的数据（比如 ",-1)),i("code",null,l((k=t.user)==null?void 0:k.age),1),s[3]||(s[3]=a(", ",-1)),i("code",null,l((p=t.book)==null?void 0:p.title),1),s[4]||(s[4]=a("）。每读取一个属性，上述 ",-1)),s[5]||(s[5]=i("strong",null,"步骤4到步骤6",-1)),s[6]||(s[6]=a(" 就会重复一次。这样，所有被模板用到的响应式数据，都会与这个 ",-1)),s[7]||(s[7]=i("code",null,"render-watcher",-1)),s[8]||(s[8]=a(" 建立起依赖关系。当整个渲染函数执行完毕，",-1)),s[9]||(s[9]=i("code",null,"render-watcher",-1)),s[10]||(s[10]=a(" 会把自己从“靶心”位置移开（",-1)),s[11]||(s[11]=i("code",null,"Dep.target = null",-1)),s[12]||(s[12]=a("），避免后续不必要的依赖收集。”",-1))])])]),s[73]||(s[73]=n("",24)),i("ol",null,[s[30]||(s[30]=n("",2)),i("li",null,[i("p",null,[s[15]||(s[15]=i("strong",null,"【触发依赖】",-1)),s[16]||(s[16]=a("：现在，",-1)),s[17]||(s[17]=i("code",null,"render-watcher",-1)),s[18]||(s[18]=a(" 开始执行渲染函数。假设我们的模板里有 ",-1)),i("code",null,l((e=t.user)==null?void 0:e.name),1),s[19]||(s[19]=a("，渲染函数执行时就会去读取 ",-1)),s[20]||(s[20]=i("code",null,"this.user.name",-1)),s[21]||(s[21]=a("。",-1))])]),s[31]||(s[31]=n("",3)),i("li",null,[i("p",null,[s[22]||(s[22]=i("strong",null,"【循环往复】",-1)),s[23]||(s[23]=a("：渲染函数会继续执行，读取所有在模板中用到的数据（比如 ",-1)),i("code",null,l((E=t.user)==null?void 0:E.age),1),s[24]||(s[24]=a(", ",-1)),i("code",null,l((r=t.book)==null?void 0:r.title),1),s[25]||(s[25]=a("）。每读取一个属性，上述 ",-1)),s[26]||(s[26]=i("strong",null,"步骤4到步骤6",-1)),s[27]||(s[27]=a(" 就会重复一次。这样，所有被模板用到的响应式数据，都会与这个 ",-1)),s[28]||(s[28]=i("code",null,"render-watcher",-1)),s[29]||(s[29]=a(" 建立起依赖关系。",-1))])]),s[32]||(s[32]=i("li",null,[i("p",null,[i("strong",null,"【清理现场】"),a("：当整个渲染函数执行完毕，"),i("code",null,"render-watcher"),a(" 会把自己从“靶心”位置移开（"),i("code",null,"Dep.target = null"),a("），避免后续不必要的依赖收集。”")])],-1))]),s[74]||(s[74]=n("",68)),i("ol",null,[s[36]||(s[36]=n("",1)),i("li",null,[s[33]||(s[33]=i("strong",null,"依赖收集：",-1)),s[34]||(s[34]=a(" 当我们在模板中读取 ",-1)),i("code",null,l(t.computedValue),1),s[35]||(s[35]=n("",8))]),s[37]||(s[37]=i("li",null,[i("strong",null,"更新机制："),a(" 当计算属性依赖的数据发生变化时，会通知这个 "),i("code",null,"computed Watcher"),a("。但它"),i("strong",null,"不会立即重新计算"),a("，而是仅仅把自己的 "),i("code",null,"dirty"),a(" 标记设置为 "),i("code",null,"true"),a("。这样，下次在模板中读取它时，它就会重新计算并缓存新值。这种机制避免了不必要的计算，优化了性能。")],-1))]),s[75]||(s[75]=n("",127)),i("ul",null,[s[48]||(s[48]=i("li",null,[i("strong",null,[i("code",null,"reactive")]),a("：直接访问和修改属性即可，符合直觉。")],-1)),s[49]||(s[49]=i("li",null,[i("strong",null,[i("code",null,"ref")]),a("：必须通过 "),i("code",null,".value"),a(" 属性来读写。")],-1)),i("li",null,[s[38]||(s[38]=i("strong",null,"在模板中",-1)),s[39]||(s[39]=a("：Vue 编译器会自动对 ",-1)),s[40]||(s[40]=i("code",null,"ref",-1)),s[41]||(s[41]=a(" 进行",-1)),s[42]||(s[42]=i("strong",null,"解包（Unwrap）",-1)),s[43]||(s[43]=a("，所以模板中可以直接写 ",-1)),i("code",null,l(t.count),1),s[44]||(s[44]=a(" 而不是 ",-1)),i("code",null,l((d=t.count)==null?void 0:d.value),1),s[45]||(s[45]=a("。而 ",-1)),s[46]||(s[46]=i("code",null,"reactive",-1)),s[47]||(s[47]=a(" 对象的属性则始终保持直接访问。",-1))])]),s[76]||(s[76]=n("",141)),i("ul",null,[s[55]||(s[55]=i("li",null,[i("p",null,[i("strong",null,"原理"),a("：")]),i("ul",null,[i("li",null,[i("code",null,"v-html"),a("用于更新元素的"),i("code",null,"innerHTML"),a("。它会将数据解析为普通HTML并插入到指定元素中。")])])],-1)),i("li",null,[i("p",null,[s[50]||(s[50]=i("strong",null,"注意",-1)),s[51]||(s[51]=a("： 这会",-1)),s[52]||(s[52]=i("strong",null,"忽略",-1)),s[53]||(s[53]=a("数据绑定中的HTML内容插值（",-1)),i("code",null,l(),1),s[54]||(s[54]=a("），因为Vue的模板语法是基于字符串的，不能直接解释HTML标签。 直接渲染HTML非常危险，容易导致XSS攻击，所以绝不能用于用户提交的内容。",-1))])]),s[56]||(s[56]=n("",1))]),s[77]||(s[77]=n("",827)),i("ul",null,[s[70]||(s[70]=i("li",null,[i("strong",null,"发布者（Dep）"),a("：每个响应式对象的属性都有一个 Dep 实例，用来收集依赖（订阅者）。")],-1)),s[71]||(s[71]=i("li",null,[i("strong",null,"订阅者（Watcher）"),a("：通常是组件的渲染函数、计算属性或者用户自定义的 watch。当数据变化时，Dep 会通知所有订阅它的 Watcher 进行更新。")],-1)),i("li",null,[s[57]||(s[57]=i("strong",null,"流程",-1)),s[58]||(s[58]=a("：我们在模板中读取 ",-1)),i("code",null,l(t.message),1),s[59]||(s[59]=a("，这个过程会触发 ",-1)),s[60]||(s[60]=i("code",null,"message",-1)),s[61]||(s[61]=a(" 的 ",-1)),s[62]||(s[62]=i("code",null,"getter",-1)),s[63]||(s[63]=a("，将当前的 Watcher（订阅者）收集到 ",-1)),s[64]||(s[64]=i("code",null,"message",-1)),s[65]||(s[65]=a(" 对应的 Dep（发布者）中。当我们修改 ",-1)),s[66]||(s[66]=i("code",null,"message",-1)),s[67]||(s[67]=a(" 时，会触发 ",-1)),s[68]||(s[68]=i("code",null,"setter",-1)),s[69]||(s[69]=a("，由 Dep 通知所有 Watcher，从而完成组件的重新渲染。",-1))])]),s[78]||(s[78]=n("",480))])}const H=g(_,[["render",M]]);export{L as __pageData,H as default};
