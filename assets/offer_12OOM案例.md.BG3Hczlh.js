import{_ as a,c as o,o as l,ae as r}from"./chunks/framework.Cd-3tpCq.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"offer/12OOM案例.md","filePath":"offer/12OOM案例.md"}'),i={name:"offer/12OOM案例.md"};function t(p,e,n,d,s,c){return l(),o("div",null,e[0]||(e[0]=[r('<h3 id="oom案例" tabindex="-1">OOM案例 <a class="header-anchor" href="#oom案例" aria-label="Permalink to &quot;OOM案例&quot;">​</a></h3><h4 id="效果-背景需求说明" tabindex="-1">效果(背景需求说明) <a class="header-anchor" href="#效果-背景需求说明" aria-label="Permalink to &quot;效果(背景需求说明)&quot;">​</a></h4><p>Electron 是一个基于 Node.js 和 Chromium 的框架，允许开发者使用 Web 技术（HTML、CSS、JavaScript）构建跨平台的桌面应用程序，对于前端开发工作者来说挺好上手的，没有语法的门槛，非常友好；但有利也有弊，正是由于集成 Node.js 和 Chromium，Electron 应用程序每次运行通常需要加载完整的 Chromium 和 Node.js，运行时，本身就容易导致内存和 CPU 占用较高，在这个大前提下，如果还不注意代码规范，存在内存溢出的隐患，后果非常糟糕；</p><p>客户端交付过程中有客户反馈使用RPA客户端的过程中，有一定概率会遇到客户端白屏，崩溃问题，导致客户端无法使用甚至工程数据丢失，但又不是必现，没有明确的复现路径；</p><h4 id="初步方案" tabindex="-1">初步方案 <a class="header-anchor" href="#初步方案" aria-label="Permalink to &quot;初步方案&quot;">​</a></h4><h4 id="存在问题" tabindex="-1">存在问题 <a class="header-anchor" href="#存在问题" aria-label="Permalink to &quot;存在问题&quot;">​</a></h4><ol><li>内存泄漏问题在特定场景下触发，且需要长时间使用后会触发，难复现</li><li>整个项目代码量巨大，业务逻辑复杂，难以定位和排查</li><li>OOM引起的原因众多，排查方向不好确定</li></ol><h4 id="自己思考" tabindex="-1">自己思考 <a class="header-anchor" href="#自己思考" aria-label="Permalink to &quot;自己思考&quot;">​</a></h4><ul><li><p>因为当时也是第一次进行OOM的排查，没啥经验，首先先去调研学习JS垃圾回收原理基础，梳理常见OOM案例，后续还在团队内部组织了分享；</p></li><li><p>通过场景分析方式，结合devtools的performance monitor和memory，对比快照，查看操作前后的内存及cpu使用情况，逐个文件走查代码， 发现导致dom及数据等不能被回收的问题代码，再修改</p><ul><li>performance monitor: 实时监控 cpu，内存使用情况，dom节点个数等</li><li>performance: 录制操作前后的dom、内存等的性能情况</li></ul></li><li><p><strong>在整体的排查中，个人经验，先排查DOM是否被回收，再排查Heap的增长情况</strong></p><p><strong>DOM排查步骤：</strong></p><p>步骤1：观察现象：排查某个操作引起的dom不回收，如切换dom，观察monitor中的dom节点个数、heap等（操作-&gt;清除，注意开发环境先清除console、排除干扰）</p><p>步骤2：录制操作前后快照：对比两个快照，搜索detached查看未被回收的游离DOM，定位代码组件</p><p>步骤3：排查代码：不复杂的页面/组件, 可以采用打开关闭/注释; 复杂的组件(如包含很多子组件的，为避免组件互相影响，建议单个组件单个组件的排查)</p><p>注：在编辑页面，起初使用代码注释方法排查，排查单个组件内部，弊端：需要注释大量的代码，且容易受其他组件/功能的影响，导致排查问题及修改问题易被干扰（只要有一个组件的dom未被垃圾回收（GC机制），则页面上所有的dom都不会被垃圾回收 -- dom引用关联），经过了一段时间排查之后，觉得效率低下，不能快速定位问题，最终，就是使用Test组件，每次仅展示单个组件，使用v-if形式，通过点击按钮进行切换，查看组件的垃圾回收情况，然后在单个组件内部进行注释，逐个排查</p><p><strong>Heap排查：</strong></p><p>基本上游离dom引起的OOM问题排查解决完之后，剩余的基本为大数据量引起的heap的增长，主要也是根据具体的操作，排查代码逻辑，通过工具或注释排查（主要查看代码变量引用赋值，cloneDeep等易引起heap大量增长的情况）</p></li></ul><h4 id="优化后的解决的问题" tabindex="-1">优化后的解决的问题 <a class="header-anchor" href="#优化后的解决的问题" aria-label="Permalink to &quot;优化后的解决的问题&quot;">​</a></h4><p>客户端白屏崩溃问题大幅度减少，基本维持在1%以内</p><p>形成前端侧研发行为规范 - 开发红线</p><ul><li>Websocket中的callback在销毁时未置空，组件销毁时记着destroy</li><li>事件监听未移除监听，不能使用匿名函数，BUS.$on没有在销毁时调用BUS.$off</li><li>使用fs.readFileSync读取大数据量的文件—日志内存溢出，会将数据先缓存在内存再进行读写导致</li><li>复制粘贴大量数据存储导致的js heap增长太高，将复制的数据存储在临时文件，通过流形式读写文件</li><li>慎用cloneDeep，cloneDeep在大数据量情况下，会导致js heap的翻倍增长</li><li>长列表修改为虚拟列表 VxeTable</li></ul>',13)]))}const u=a(i,[["render",t]]);export{m as __pageData,u as default};
