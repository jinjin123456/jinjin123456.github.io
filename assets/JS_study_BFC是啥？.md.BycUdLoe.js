import{_ as s,c as i,o as t,R as a}from"./chunks/framework.BmksyVjO.js";const l="/assets/%E5%8C%85%E5%90%AB%E5%86%85%E9%83%A8%E6%B5%AE%E5%8A%A8.VAigAfRi.png",n="/assets/%E4%B8%8D%E5%92%8C%E5%90%8E%E5%8F%B0margin%E5%90%88%E5%B9%B6.C46ogCwY.png",e="/assets/%E6%8E%92%E9%99%A4%E5%A4%96%E9%83%A8%E6%B5%AE%E5%8A%A8.BIvmM5jE.png",_=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JS/study/BFC是啥？.md","filePath":"JS/study/BFC是啥？.md"}'),o={name:"JS/study/BFC是啥？.md"},r=a('<h2 id="啥是bef" tabindex="-1">啥是BEF? <a class="header-anchor" href="#啥是bef" aria-label="Permalink to &quot;啥是BEF?&quot;">​</a></h2><p>官方定义：BFC（Block Formatting Context）块格式化上下文， 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。简单来说，<strong>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素</strong>。其实我们经常使用到BFC，只不过不知道它是BFC而已。</p><h2 id="常见的创建bfc的方式" tabindex="-1">常见的创建BFC的方式 <a class="header-anchor" href="#常见的创建bfc的方式" aria-label="Permalink to &quot;常见的创建BFC的方式&quot;">​</a></h2><ul><li>根元素：body</li><li>元素设置<strong>浮动</strong>：float 除 none 以外的值left right</li><li>元素设置<strong>绝对定位</strong>：position (absolute、fixed)</li><li><strong>display</strong> 值为：inline-block、table-cell、table-caption、flex</li><li><strong>overflow</strong> 值为：hidden、auto、scroll；一般采取副作用较小的方式overflow:hidden</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.clearfix:after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="bfc特点及作用" tabindex="-1">BFC特点及作用 <a class="header-anchor" href="#bfc特点及作用" aria-label="Permalink to &quot;BFC特点及作用&quot;">​</a></h2><ul><li><p>父元素可以<strong>包含浮动的子元素</strong></p><ul><li>清除浮动，解决<strong>高度塌陷</strong>问题：在文档流中元素的高度默认被子元素撑开，当子元素浮动时，子元素会脱离文档流。此时将不能撑起父元素的高度，会导致父元素的高度塌陷。父元素高度塌陷会导致其他元素的位置上移，导致页面的布局混乱，可以看到藏青色的元素就出现了高度塌陷的问题</li></ul><p><img src="'+l+'" alt=""></p></li><li><p>父元素的<strong>垂直外边距</strong>不会和子元素重叠</p><ul><li>解决后代Margin边距重叠</li></ul><p><img src="'+n+'" alt=""></p></li><li><p>开启BFC的元素<strong>不会被浮动元素覆盖</strong></p><ul><li>两栏布局</li></ul><p><img src="'+e+'" alt=""></p></li></ul>',7),h=[r];function p(k,E,d,c,g,C){return t(),i("div",null,h)}const B=s(o,[["render",p]]);export{_ as __pageData,B as default};
