import{_ as t,c as u,o as r,ae as a,j as l,a as i}from"./chunks/framework.Cd-3tpCq.js";const p=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/02JavaScript/js数据类型梳理.md","filePath":"frontend/02JavaScript/js数据类型梳理.md"}'),n={name:"frontend/02JavaScript/js数据类型梳理.md"};function s(o,e,d,m,c,h){return r(),u("div",null,e[0]||(e[0]=[a("",21),l("ul",null,[l("li",null,"存储键值对：键 - 任何字符串或者Symbol; 值：任何类型"),l("li",null,[i("对象的增删改查 "),l("ul",null,[l("li",null,"访问/修改属性方式：点符号+方括号"),l("li",null,"删除 delete obj.prop"),l("li",null,'检查是否存在给定键的属性： "key" in obj'),l("li",null,[i("遍历对象 "),l("ul",null,[l("li",null,"for(let key in obj)"),l("li",null,"Object.keys/values/entries()"),l("li",null,[i("小技巧：转换对象 "),l("ul",null,[l("li",null,"let doublePrices = Object.fronEntries(Object.entries(prices).map(entry => [entry[0], entry[1] * 2]))")])])])])])]),l("li",null,"对象有特别的顺序：整数属性会被进行排序，其他属性则按照创建的熟悉怒显示"),l("li",null,[i('对象通过引用被赋值和拷贝，会互相影响，为实现"真正的拷贝"，常用方式 '),l("ul",null,[l("li",null,"浅拷贝 - Object.assign()"),l("li",null,"深拷贝 - 可直接使用各种第三方库")])]),l("li",null,[i("垃圾回收 "),l("ul",null,[l("li",null,"自动执行"),l("li",null,"可达性(可状态则一定是存在于内存中)"),l("li",null,"孤岛状态")])]),l("li",null,[i("构造函数 "),l("ul",null,[l("li",null,[i("概念：技术上就是常规函数，不过有两个约定 "),l("ul",null,[l("li",null,"命名首字母大写"),l("li",null,[i("使用new操作符执行 "),l("ul",null,[l("li",null,"创建空对象并分配给this"),l("li",null,"执行函数体，通常修改this，添加新属性"),l("li",null,"返回this的值")])])])])]),l("div",{class:"language- vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[l("code",null,[l("span",{class:"line"},[l("span",null,"function User(name) {")]),i(`
`),l("span",{class:"line"},[l("span",null,"  // this = {};(隐式创建)")]),i(`
`),l("span",{class:"line"},[l("span",null,"  this.name = name")]),i(`
`),l("span",{class:"line"},[l("span",null,"  this.isAdmin = false")]),i(`
`),l("span",{class:"line"},[l("span")]),i(`
`),l("span",{class:"line"},[l("span",null,"  // return this;(隐式返回)")]),i(`
`),l("span",{class:"line"},[l("span",null,"}")])])])]),l("ul",null,[l("li",null,[i("常见场景 "),l("ul",null,[l("li",null,"需要创建很多类似的对象，例如多个用户或菜单"),l("li",null,[i("封装构建单个对象的代码而无需将来重用 "),l("ul",null,[l("li",{"this.name":""},"let user = new function()")])])])]),l("li",null,[i("new.target - 在函数内部可使用new.target属性检查它是否被使用new进行调用了 "),l("ul",null,[l("li",null,"常规函数 - new.target -> undefined"),l("li",null,"new调用 - new.target -> 等于该函数")])]),l("li",null,[i("return的特殊行为 "),l("ul",null,[l("li",null,"构造函数默认没有return，任务只是将必要数据写入this并隐式返回this"),l("li",null,"当出现return时，return的是一个对象则返回该对象，其他情况一律返回this")])]),l("li",null,"添加方法")])]),l("li",null,[i("可选链 - 安全的访问嵌套属性，如果存在就返回对应属性值，不存在返回undefined "),l("ul",null,[l("li",null,[i("常见的三种使用形式 "),l("ul",null,[l("li",null,"obj?.prop"),l("li",null,"obj?.[prop]"),l("li",null,"obj.method?.()")])]),l("li",null,[i("使用注意 "),l("ul",null,[l("li",null,"不可滥用，仅当左侧部分不存在也可接受的情况下适合使用"),l("li",null,"可安全读取或删除但不能写入")])])])])],-1),a("",17),l("ul",null,[l("li",null,"对象 -> JSON"),l("li",null,[i("参数说明 "),l("ul",null,[l("li",null,"value - 指定要编码的对象"),l("li",null,[i("replacer - 指定要编码的属性数组或映射函数(key, value) => {} "),l("ul",null,[l("li",null,"借助replacer参数过滤掉循环引用的属性"),l("li",null,[i("注意 "),l("ul",null,[l("li",null,"replacer 函数会获取每个键/值对，包括嵌套对象和数组项。它被递归地应用。"),l("li",null,"第一个 (key, value) 对的键是空的，并且该值是整个目标对象，有需要的情况下可分析并替换/跳过整个对象。")])])])]),l("li",null,"spaces - 指定用于格式化的空格数量，该参数也可以指定为字符串")])]),l("li",null,[i("注意事项 "),l("ul",null,[l("li",null,[i("JSON与对象字面量的区别 "),l("ul",null,[l("li",null,"双引号：JSON中是没有单引号和反引号的，只有双引号；除了字符串必须双引号，属性名称也必须双引号")])]),l("li",null,[i("支持转换的数据类型 "),l("ul",null,[l("li",{"css-module":"."},"Objects"),l("li",null,"Arrays [ ... ]"),l("li",null,"strings"),l("li",null,"numbers"),l("li",null,"boolean values true/false"),l("li",null,"null")])]),l("li",null,[i("会被跳过的特定属性 "),l("ul",null,[l("li",null,"函数属性(方法)"),l("li",null,"Symbol类型的键和值"),l("li",null,"存储undefined的属性")])]),l("li",null,"重要限制：不得有循环引用")])]),l("li",null,[i("toJSON "),l("ul",null,[l("li",null,"类似toString，对象可提供toJSON方法来进行JSON转换。如果可用，JSON.stringify 会自动调用它。")])])],-1),l("h3",{id:"json-parse-str-reviver",tabindex:"-1"},[i("JSON.parse(str, [reviver]) "),l("a",{class:"header-anchor",href:"#json-parse-str-reviver","aria-label":'Permalink to "JSON.parse(str, [reviver])"'},"​")],-1),l("ul",null,[l("li",null,"JSON -> 对象"),l("li",null,[i("参数说明 "),l("ul",null,[l("li",null,"str - 要解析的JSON字符串"),l("li",null,[i("reviver - 可选的函数(key,value) => {}，该函数将为每个 (key, value) 对调用，并可以对值进行转换。 "),l("ul",null,[l("li",null,"例如在对日期的转换上，可将一个date的字符串转换为日期对象")])])])])],-1)]))}const f=t(n,[["render",s]]);export{p as __pageData,f as default};
