import{_ as i,c as e,o as t,ae as a}from"./chunks/framework.Cd-3tpCq.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/02JavaScript/解构赋值.md","filePath":"frontend/02JavaScript/解构赋值.md"}'),n={name:"frontend/02JavaScript/解构赋值.md"};function s(u,l,o,r,h,p){return t(),e("div",null,l[0]||(l[0]=[a(`<h2 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-label="Permalink to &quot;解构赋值&quot;">​</a></h2><ul><li>简洁地将一个对象或数组拆开赋值到多个变量上</li></ul><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h3><ul><li>使用形式 <ul><li>let [ item1 = defaultValue1, item2 = defaultValue2, ...rest ] = array</li><li>...rest 收集剩余的数组项</li><li>默认值，可以是常量，表达式和函数，只有在该变量值未被赋值的时候才会计算；未指定默认值的情况下该变量会被赋值undefined</li></ul></li><li>使用场景 <ul><li>与split方法一起使用</li><li>与entries()方法， Map对象进行循环操作 <ul><li>for (let [key, value] of Object.entries(user))</li><li>for (let [key, value] of new Map())</li></ul></li><li>交换变量值的技巧 <ul><li>[guest, admin] = [admin, guest]</li></ul></li></ul></li><li>注意事项 <ul><li>”解构“不等于&quot;破坏&quot;</li><li>忽略使用逗号的元素</li><li>等号右侧可以是任何可迭代的元素</li><li>等号左侧使用任何“可以被赋值的”东西 <ul><li>let [ user.name, user.surname ] = &quot;John Smith&quot;.split(&#39; &#39;)</li></ul></li></ul></li></ul><h3 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h3><ul><li>使用形式 <ul><li>let { prop: varName = default, ...rest} = object</li><li>...rest 收集剩余的属性项</li><li>默认值</li></ul></li><li>使用场景 <ul><li>智能函数参数 <ul><li>function showMenu({title = &quot;Untitled&quot;, width = 200, height = 100, items = []}) <ul><li>调用时，showMenu() × showMenu({}) √</li></ul></li><li>function showMenu({title = &quot;Untitled&quot;, width = 200, height = 100, items = []} = {}) <ul><li>调用时，showMenu() √ showMenu({}) √</li></ul></li></ul></li></ul></li><li>注意事项 <ul><li>不使用let的坑</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let title, width, height;</span></span>
<span class="line"><span>// 这一行发生了错误</span></span>
<span class="line"><span>// 问题在于 JavaScript 把主代码流（即不在其他表达式中）的 {...} 当做一个代码块。</span></span>
<span class="line"><span>{title, width, height} = {title: &quot;Menu&quot;, width: 200, height: 100};</span></span>
<span class="line"><span>// 现在就可以了</span></span>
<span class="line"><span>({title, width, height} = {title: &quot;Menu&quot;, width: 200, height: 100});</span></span></code></pre></div></li></ul><h3 id="嵌套结构" tabindex="-1">嵌套结构 <a class="header-anchor" href="#嵌套结构" aria-label="Permalink to &quot;嵌套结构&quot;">​</a></h3><ul><li>从嵌套数组/对象中提取数据也是可以的，此时等号左侧必须和等号右侧有相同的结构</li></ul>`,8)]))}const f=i(n,[["render",s]]);export{c as __pageData,f as default};
