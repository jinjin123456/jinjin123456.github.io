import{_ as a,o as e,c as t,R as l,k as i,a as s}from"./chunks/framework.RpFkmAtX.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JS/study/NodeJS/node基础.md","filePath":"JS/study/NodeJS/node基础.md"}'),n={name:"JS/study/NodeJS/node基础.md"},h=l(`<h2 id="node-buffer" tabindex="-1">node_buffer <a class="header-anchor" href="#node-buffer" aria-label="Permalink to &quot;node_buffer&quot;">​</a></h2><h3 id="buffer对象" tabindex="-1">Buffer对象 <a class="header-anchor" href="#buffer对象" aria-label="Permalink to &quot;Buffer对象&quot;">​</a></h3><ul><li><p>创建的三种方式</p><ul><li>const buf = new Buffer(size)</li><li>const buf = new Buffer(array)</li><li>const buf = new Buffer(str, [encoding])</li></ul></li><li><p>buf.length - 缓存区大小</p></li><li><p>buf.fill(value, [offset], [end])</p><ul><li>初始化缓存区中的所有内容</li></ul></li><li><p>buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])</p><ul><li>将Buffer对象中的二进制数据复制到另一个Buffer对象中</li><li>a.copy(b, 10) - 将a Buffer对象中的内容复制到b Buffer对象中</li></ul></li><li><p>字符串与缓存</p><ul><li><p>区别：</p><ul><li>在Node.js中，一个字符串的长度与根据该字符串所创建的缓存区的长度并不相同</li><li>字符串一旦创建后不可修改，而Buffer对象是可以被修改的</li><li>Buffer对象不具备字符串的常见方法，只有slice方法，并且是与原数据共享内存区域</li></ul></li><li><p>转换为字符串</p><ul><li><p>buf.toString([encoding], [start], [end])</p><ul><li>Buffer对象转换为字符串</li></ul></li><li><p>StringDecoder对象</p><ul><li><p>适用于需要将多个Buffer对象中的二进制数据转换为文字的场合</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StringDecodr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;string_decoder&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).StringDecoder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> decoder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([encoding])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decoder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  返回转换后的字符串</span></span></code></pre></div></li></ul></li></ul></li><li><p>buf.write(string, [offset], [length], [encoding])</p><ul><li>向已创建好的Buffer对象中写入字符串</li></ul></li></ul></li><li><p>数值对象与缓存</p><ul><li>将Buffer对象读取为Number类型数据的方法 <ul><li>buf.readUInt8(offset, [noAssert])</li><li>...</li></ul></li><li>将Number对象转换为精确类型后向Buffer中写入 <ul><li>buf.writeUInt8(value, offset, [noAssert])</li><li>...</li></ul></li></ul></li><li><p>JSON对象与缓存</p><ul><li>JSON.stringify() - 将Buffer对象转换为字符串</li><li>JSON.parse() - 将字符串转换为数组</li></ul></li><li><p>Buffer常见的类方法</p><ul><li>Buffer.isBuffer(obj)</li><li>Buffer.byteLength(string, [encoding])</li><li>Buffer.concat(list, [totalLength]) <ul><li>将几个Buffer对象结合创建为一个新的Buffer对象</li></ul></li><li>Buffer.isEncoding(encoding)</li></ul></li></ul><h2 id="node-fs" tabindex="-1">node_fs <a class="header-anchor" href="#node-fs" aria-label="Permalink to &quot;node_fs&quot;">​</a></h2><h3 id="同步异步的区别" tabindex="-1">同步异步的区别 <a class="header-anchor" href="#同步异步的区别" aria-label="Permalink to &quot;同步异步的区别&quot;">​</a></h3><ul><li>大多数情况下为了防止阻塞，推荐调用异步方法，很少场景中(如读取配置文件并启动服务器)需使用同步方法</li><li>同时调用多个异步方法无法确保操作结果的返回顺序，如果要保障顺序就要上异步方法的回调中继续调用下一个异步方法</li></ul><h3 id="文件读取相关" tabindex="-1">文件读取相关 <a class="header-anchor" href="#文件读取相关" aria-label="Permalink to &quot;文件读取相关&quot;">​</a></h3><h4 id="完整读写" tabindex="-1">完整读写 <a class="header-anchor" href="#完整读写" aria-label="Permalink to &quot;完整读写&quot;">​</a></h4><ul><li>fs.readFile(filename, [options], (err, data) =&gt; {})</li><li>fs.writeFile(filename, data, [options], (err) =&gt; {}) <ul><li>当文件不存在时会自动创建改文件</li></ul></li><li>options <ul><li>flag:用于指定对该文件采取何种操作，默认值为&quot;w&quot;</li><li>mode:指定当文件被打开时对该文件的读写权限</li><li>encoding:属性值可以为&quot;utf-8&quot;,&quot;ascii&quot;,&quot;base64&quot;</li></ul></li><li>fs.appendFile(filename, data, [options], (err) =&gt; {}) <ul><li>flag属性默认为&quot;a&quot;,表示追加数据</li></ul></li><li>对应的同步方法</li></ul><h4 id="指定位置读写" tabindex="-1">指定位置读写 <a class="header-anchor" href="#指定位置读写" aria-label="Permalink to &quot;指定位置读写&quot;">​</a></h4><ul><li>fs.open(filename, flags, [mode], (err, fd) =&gt; {}) <ul><li>fd为文件描述符</li></ul></li><li>fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer) =&gt; {})</li><li>fs.write(fd, buffer, offset, length, position, (err, written, buffer) =&gt; {})</li><li>fs.fsync(fd, [callback]) <ul><li>将内存缓冲区的剩余数据全部写入文件，同步之后再使用fs.close()关闭文件比较安全</li></ul></li><li>fs.close(fs, [callback])</li></ul><h4 id="其他文件操作" tabindex="-1">其他文件操作 <a class="header-anchor" href="#其他文件操作" aria-label="Permalink to &quot;其他文件操作&quot;">​</a></h4><ul><li>fs.truncate(filename, len, (err) =&gt; {}) 截断文件 <ul><li>fs.truncate(fd, len, (err) =&gt; {})</li></ul></li><li>fs.watchFile(filename, [options], listener) <ul><li>options - persistent:true, interval</li><li>listener - (curr, prev) =&gt; {}</li><li>fs.unwatchFile(filename, [listener])</li></ul></li></ul><h3 id="目录相关操作" tabindex="-1">目录相关操作 <a class="header-anchor" href="#目录相关操作" aria-label="Permalink to &quot;目录相关操作&quot;">​</a></h3><ul><li>fs.mkdir(path, [mode], (err) =&gt; {})</li><li>fs.readdir(path, (err, files) =&gt; {})</li><li>fs.rmdir(path, (err) =&gt; {})</li></ul><h4 id="文件目录皆可" tabindex="-1">文件目录皆可 <a class="header-anchor" href="#文件目录皆可" aria-label="Permalink to &quot;文件目录皆可&quot;">​</a></h4><ul><li>fs.stat(path, (err, stats) =&gt; {}) 查看文件/目录信息 <ul><li>返回fs.Stats对象，拥有isFile(), isDirectory(), size, atime, mtime, ctime等方法与属性</li><li>fs.fstat(fd, (err, stats) =&gt; {})</li></ul></li><li>fs.lstat(path, (err, stats) =&gt; {}) 查看符号链接文件/目录信息</li><li>fs.realpath(path, [cache], (err, resolvedPath) =&gt; {})</li><li>fs.utimes(path, atime, mtime, (err) =&gt; {}) 修改访问时间与修改时间 <ul><li>fs.futimes(fd, atime, mtime, (err) =&gt; {})</li></ul></li><li>fs.chmod(path, mode, (err) =&gt; {}) 修改访问权限 <ul><li>fs.fchmod(fd, mode, (err) =&gt; {})</li></ul></li><li>fs.rename(oldPath, newPath, (err) =&gt; {})</li><li>fs.link(srcpath, dstpath, (err) =&gt; {}) <ul><li>创建硬链接</li><li>fs.unlink(path, (err) =&gt; {}) 删除硬链接</li></ul></li><li>fs.synlink(srcpath, dstpath, [type], (err) =&gt; {}) <ul><li>创建符号链接</li><li>type：file、dir</li><li>fs.readlink(path, (err, linkString) =&gt; {})</li></ul></li><li>const watcher = fs.watch(filename, [options], [listener]) <ul><li>listener - (event, filename) =&gt; {}，当event参数值为rename或change时，filename参数值为任何发生改变的文件的完整路径及文件名。</li><li>返回一个fs.FSWatcher对象，该对象拥有close方法</li><li>watcher.close() <ul><li>watcher.on(&#39;change&#39;, (event, filename) =&gt; {})</li></ul></li></ul></li></ul><h3 id="文件流读写" tabindex="-1">文件流读写 <a class="header-anchor" href="#文件流读写" aria-label="Permalink to &quot;文件流读写&quot;">​</a></h3><ul><li>const readStream= fs.createReadStream(path, [options]) <ul><li>options <ul><li>flags</li><li>encoding</li><li>autoClose</li><li>start</li><li>end</li></ul></li><li>readStream.on(eventName, () =&gt; {}) <ul><li>open</li><li>data</li><li>end</li><li>close</li><li>error (err) =&gt; {}</li></ul></li><li>readStream.pause() <ul><li>该方法可以暂停data事件的触发</li></ul></li><li>readStream.resume() <ul><li>该方法可以恢复data事件的触发</li></ul></li><li>readStream.pipe(destination, [options]) <ul><li>destination - 可用于写入流数据的对象</li><li>options：其中end属性，指定布尔值，如果为true，当数据被全部读取完毕时，立即将缓存区中的剩余数据全部写入文件中并关闭文件。默认为true</li><li>readStream.pipe(writeStream)</li></ul></li><li>readStream.unpipe([destination]) <ul><li>如果不设置destination，则取消所有对在pipe方法中指定的目标文件的写入操作</li></ul></li></ul></li><li>const writeStream = fs.createWriteStream(path, [options]) <ul><li>options <ul><li>flags</li><li>encoding</li><li>start: 指定文件的开始写入位置</li></ul></li><li>writeStream.write(chunk, [encoding], [callback]) <ul><li>chunk 可以为一个Buffer对象或一个字符串，指定要写入的数据</li><li>该方法会返回布尔值，当缓存区中的数据已全部写满时，该参数值为false</li></ul></li><li>writeStream.end([chunk], [encoding], [callback])</li><li>writeStream.bytesWritten 为当前已在文件中写入数据的字节数</li><li>writeStream.on(eventName, () =&gt; {}) <ul><li>drain：当缓存区中的数据已被全部读出并写入到目标文件时，触发writeStream的drain事件，表示缓存区中的数据已全部读出，可以继续向操作系统缓存区中写入新的数据。</li><li>error (err) =&gt; {}</li></ul></li></ul></li></ul><h3 id="路径操作path模块" tabindex="-1">路径操作PATH模块 <a class="header-anchor" href="#路径操作path模块" aria-label="Permalink to &quot;路径操作PATH模块&quot;">​</a></h3><ul><li>path.normalize(p)</li><li>path.join() <ul><li>path.join(__dirname, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</li></ul></li><li>path.resolve() <ul><li>以应用程序的根目录为起点，根据所有的参数值字符串解析出一个绝对路径</li></ul></li><li>path.relative(from, to) <ul><li>获取两个路径之间的相对关系</li></ul></li><li>path.dirname(p) <ul><li>获取路径中的目录名</li></ul></li><li>path.basename(p, [text]) <ul><li>获取路径中的文件名</li></ul></li><li>path.extname(p) <ul><li>获取路径中的扩展名(后缀名)</li></ul></li><li>path.sep 操作系统中的文件分隔符 eg:\\</li><li>path.delimiter 操作系统中的路径分隔符 eg:;</li></ul><h2 id="node-http-https" tabindex="-1">node_http&amp;https <a class="header-anchor" href="#node-http-https" aria-label="Permalink to &quot;node_http&amp;https&quot;">​</a></h2><h3 id="http服务端" tabindex="-1">HTTP服务端 <a class="header-anchor" href="#http服务端" aria-label="Permalink to &quot;HTTP服务端&quot;">​</a></h3><ul><li>const server = http.createServer([requestListener]) <ul><li>const http = require(&#39;http&#39;)</li><li>requestListener - 当接收到客户端请求时触发，两种形式 <ul><li>requestListener - (req, res) =&gt; {}</li><li>server.on(&#39;request&#39;, (req, res) =&gt; {})</li></ul></li></ul></li><li>server.listen(port, [host], [backlog], [callback]) <ul><li>port - 指定端口号</li><li>host - 监听的地址</li><li>backlog - 指定位于等待队列中的客户端连接的最大数量，默认511</li><li>callback <ul><li>当服务器端指定了需要监听的地址及端口后，服务端将立即监听来自于该地址及端口的客户端连接，此时触发服务器的listening事件</li><li>server.on(&#39;listening&#39;, () =&gt; {})</li></ul></li></ul></li><li>server.close() <ul><li>server.on(&#39;close&#39;, () =&gt; {})</li></ul></li><li>server.on(&#39;error&#39;, (err) =&gt; {}) <ul><li>err.code === &#39;EADDRINUSE&#39; 端口被占用</li></ul></li><li>server.on(&#39;connection&#39;, (socket) =&gt; {}) <ul><li>当客户端与服务器端建立连接时触发服务器端的connection事件</li></ul></li><li>server.setTimeout(msecs, (socket) =&gt; {}) <ul><li>设置服务器端的超时时间。当超过该时间之后，客户端不可继续利用本次连接，下次请求要重新建立连接。</li><li>server.on(&#39;timeout&#39;, (socket) =&gt; {})</li><li>server.timeout属性 - 可读写</li></ul></li></ul><h4 id="req-http-incomingmessage对象" tabindex="-1">req - http.IncomingMessage对象 <a class="header-anchor" href="#req-http-incomingmessage对象" aria-label="Permalink to &quot;req - http.IncomingMessage对象&quot;">​</a></h4><ul><li>常用属性和事件 <ul><li>method</li><li>url</li><li>headers</li><li>httpVersion</li><li>trailers</li><li>socket</li><li>req.on(&#39;data&#39;, (data) =&gt; {})</li><li>req.on(&#39;end&#39;, () =&gt; {}) - 客户端请求数据已全部接收完毕</li></ul></li><li>Query String 模块 - 查询字符串的解析与转换 <ul><li>querystring.parse(str, [sep], [eq], [options]) - 转换为对象</li><li>querystring.stringify(obj, [sep], [eq]) - 转换为查询字符串</li></ul></li><li>url模块 <ul><li>url.parse(urlStr, [parseQueryString]) <ul><li>解析得到一个对象，包含以下属性 <ul><li>href、protocol、slashes、host、auth、hostname、port、pathname、search、path、query、hash</li></ul></li></ul></li><li>url.format(urlObj) - 还原成URL字符串</li><li>url.resolve(from, to) - 结合成为一个路径</li></ul></li></ul><h4 id="res-http-serverresponse对象" tabindex="-1">res - http.ServerResponse对象 <a class="header-anchor" href="#res-http-serverresponse对象" aria-label="Permalink to &quot;res - http.ServerResponse对象&quot;">​</a></h4><ul><li>res.writeHead(statusCode, [reasonPhrase], [headers]) <ul><li>statusCode - 状态码；reasonPhrase - 对于该状态码的描述信息</li><li>headers - 指定服务器端创建的响应头对象：content-type, location, Cache-Control, Etag, Expires等等</li></ul></li><li>res.setHeader(name, value)</li><li>res.getHeader(name)</li><li>res.removeHeader(name) <ul><li>必须在res的write方法发送数据之前被调用</li></ul></li><li>res.headerSent <ul><li>响应头已发送时，该属性为true</li></ul></li><li>res.sendDate <ul><li>将其设置为false可以在响应头中删除Date字段</li></ul></li><li>res.statusCode <ul><li>当未在writeHead方法中设置状态码时，可通过该属性设置状态码</li></ul></li><li>res.addTrailers(headers) <ul><li>前提条件：必须现在响应头中添加过Trailer字段并且将字段值设置为追加的响应头中所指定的字段名</li></ul></li><li>res.write(chunk, [encoding]) <ul><li>该方法返回布尔值</li><li>true - 数据直接发送到操作系统内核缓存区</li><li>false - 数据首先缓存在内存中</li></ul></li><li>res.end(chunk, [encoding])</li><li>res.setTimeout(msecs, [callback]) <ul><li>如果指定时间内服务器没有作出响应，响应超时，则触发res对象的timeout事件</li><li>res.on(&#39;timeout&#39;, () =&gt; {})</li></ul></li><li>res.on(&#39;close&#39;, () =&gt; {}) <ul><li>在end被调用之前，连接中断，将触发res对象的close事件</li></ul></li></ul><h3 id="http客户端" tabindex="-1">HTTP客户端 <a class="header-anchor" href="#http客户端" aria-label="Permalink to &quot;HTTP客户端&quot;">​</a></h3><ul><li>const request = http.request(options, (response) =&gt; {}) <ul><li>options - 为一个对象或字符串，可配置的属性有 <ul><li>host、hostname、port、localAddress、socketPath、method、path、headers、auth、agent</li></ul></li><li>当客户端请求获取到服务器响应流，触发http.ClientRequest对象的response事件</li><li>request.on(&#39;response&#39;, (response) =&gt; {}) <ul><li>response参数值为一个http.IncomingMessage对象(?有点疑问，感觉是http.ServerResponse对象)</li></ul></li></ul></li><li>request.write(chunk, [encoding])</li><li>request.end([chunk], [encoding])</li><li>request.abort()</li><li>request.on(&#39;error&#39;, (err) =&gt; {})</li><li>request.on(&#39;socket&#39;, (socket) =&gt; {}) <ul><li>建立连接的过程中，当为该连接分配端口时，触发socket事件</li><li>socket.setTimeout(1000)</li><li>socket.on(&#39;timeout&#39;, () =&gt; { request.abort() })</li></ul></li><li>request.setTimeout(msecs, [callback]) <ul><li>为连接分配的端口设置超时时间</li></ul></li><li>http.get(options, callback) <ul><li>与http.request的区别是不用再手动调用end方法</li></ul></li></ul><h3 id="https服务器" tabindex="-1">HTTPS服务器 <a class="header-anchor" href="#https服务器" aria-label="Permalink to &quot;HTTPS服务器&quot;">​</a></h3><ul><li>创建HTTPS服务器之前，首先需要创建公钥、私钥及证书，具备证书文件之后，可以利用该证书文件创建一个pfx文件</li><li>const server = <strong>https</strong>.createServer(options, [requestListener]) <ul><li>const https = require(&#39;https&#39;)</li><li>options - 指定创建HTTPS服务器可以使用的各种选项 <ul><li>pfx, key, passphrase, cert, ca, crl, ciphers等等</li></ul></li><li>requestListener - 当接收到客户端请求时触发，两种形式 <ul><li>requestListener - (req, res) =&gt; {}</li><li>server.on(&#39;request&#39;, (req, res) =&gt; {})</li></ul></li></ul></li><li>server.listen(port, [host], [backlog], [callback]) <ul><li>port - 指定端口号</li><li>host - 监听的地址</li><li>backlog - 指定位于等待队列中的客户端连接的最大数量，默认511</li><li>callback <ul><li>当服务器端指定了需要监听的地址及端口后，服务端将立即监听来自于该地址及端口的客户端连接，此时触发服务器的listening事件</li><li>server.on(&#39;listening&#39;, () =&gt; {})</li></ul></li></ul></li><li>server.close() <ul><li>server.on(&#39;close&#39;, () =&gt; {})</li></ul></li><li>server.on(&#39;error&#39;, (err) =&gt; {}) <ul><li>err.code === &#39;EADDRINUSE&#39; 端口被占用</li></ul></li><li>server.on(&#39;connection&#39;, (socket) =&gt; {}) <ul><li>当客户端与服务器端建立连接时触发服务器端的connection事件</li></ul></li><li>server.setTimeout(msecs, (socket) =&gt; {}) <ul><li>设置服务器端的超时时间。当超过该时间之后，客户端不可继续利用本次连接，下次请求要重新建立连接。</li><li>server.on(&#39;timeout&#39;, (socket) =&gt; {})</li><li>server.timeout属性 - 可读写</li></ul></li></ul><h3 id="https客户端" tabindex="-1">HTTPS客户端 <a class="header-anchor" href="#https客户端" aria-label="Permalink to &quot;HTTPS客户端&quot;">​</a></h3><ul><li>const request = <strong>https</strong>.request(options, (response) =&gt; {}) <ul><li>options - 为一个对象或字符串，可配置的属性有 <ul><li>host、hostname、port、method、path、headers、auth、agent、pfx、key、passphrase、 cert、 ca、 crl、 ciphers、rejectUnauthorized</li></ul></li><li>当客户端请求获取到服务器响应流，触发http.ClientRequest对象的response事件</li><li>request.on(&#39;response&#39;, (response) =&gt; {})</li></ul></li><li>request.write(chunk, [encoding])</li><li>request.end([chunk], [encoding])</li><li>request.abort()</li><li>request.on(&#39;error&#39;, (err) =&gt; {})</li><li>request.on(&#39;socket&#39;, (socket) =&gt; {}) <ul><li>建立连接的过程中，当为该连接分配端口时，触发socket事件</li><li>socket.setTimeout(1000)</li><li>socket.on(&#39;timeout&#39;, () =&gt; { request.abort() })</li></ul></li><li>request.setTimeout(msecs, [callback]) <ul><li>为连接分配的端口设置超时时间</li></ul></li><li><strong>https</strong>.get(options, callback) <ul><li>与https.request的区别是不用再手动调用end方法</li></ul></li></ul><h2 id="node-process" tabindex="-1">node_process <a class="header-anchor" href="#node-process" aria-label="Permalink to &quot;node_process&quot;">​</a></h2><h3 id="进程与线程的概念" tabindex="-1">进程与线程的概念 <a class="header-anchor" href="#进程与线程的概念" aria-label="Permalink to &quot;进程与线程的概念&quot;">​</a></h3><ul><li>进程</li><li>子进程</li><li>线程</li></ul><h3 id="process对象" tabindex="-1">Process对象 <a class="header-anchor" href="#process对象" aria-label="Permalink to &quot;Process对象&quot;">​</a></h3><ul><li><p>含义：全局对象，代表Node.js应用程序</p></li><li><p>属性</p><ul><li>execPath - 应用程序的可执行文件的绝对路径</li><li>version &amp; versions</li><li>platform</li><li>argv - 包含了运行Node.js应用程序的所有命令行参数的一个数组</li><li>stdin - 可用于读入标准输入流的对象 <ul><li>process.stdin.resume() - 恢复默认情况下处于暂停状态下的标准输入流</li><li>process.stdin.on(&#39;data&#39;, (chunk) =&gt; { process.stdout.write(&#39;进程接收到数据&#39; + chunk )})</li></ul></li><li>stdout- 可用于写入标准输入流的对象</li><li>stderr - 可用于写入标准错误输出流的对象</li><li>env</li><li>config</li><li>pid - 当前Node.js应用程序的进程的PID</li><li>title</li><li>arch</li></ul></li><li><p>方法&amp;事件</p><ul><li><p>memoryUsage() - 获取内存使用情况，返回一个对象</p></li><li><p><strong>nextTick()</strong></p><ul><li><p>用于将一个函数推迟到代码中所书写的下一个同步方法执行完毕时或异步方法的事件回调函数开始执行时调用</p></li><li><p>常见使用场景</p><ul><li><p>指定一个函数在一个同步方法执行完毕时立即调用</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> finish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;文件读取完毕！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(finish)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./app.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div></li><li><p>可以使用nextTick指定两个耗时操作同步进行</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> beginAnotherTask</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./crash.mp3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;读取到%d字节。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beginAnotherTask)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./crash.mp3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;从crash.mp3文件中读取到%d字节。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li><li><p>process.maxTickDepth - nodeV0.10开始允许nextTick使用实现递归，但为了避免应用程序阻塞在死循环中，提供该属性，默认值1000.</p></li></ul></li><li><p>abort() - 向运行nodejs应用程序的进程发出SIGABART信号，使进程异常中止。</p></li><li><p>chdir(directory) - 修改应用程序中使用的当前工作目录</p></li><li><p>cwd() - 返回当前目录</p></li><li><p>exit([code])</p></li><li><p>kill(pid, [signal]) - 向一个进程发送信号</p></li><li><p>unmask([mask]) - 用于读取或修改运行nodejs程序的进程的文件权限掩码</p></li><li><p>uptime() - 当前运行时间</p></li><li><p>hrtime() - 测试一个代码段的运行时间</p></li><li><p>可能触发的事件</p><ul><li>exit - process.on(&#39;exit&#39;, () =&gt; {})</li><li>uncaughtException - process.on(&#39;uncaughtException&#39;, (err) =&gt; {})</li><li>各种信号事件 - Example: process.on(&#39;SIGINT&#39;, () =&gt; {})</li></ul></li></ul></li></ul></li></ul><h3 id="child-process模块" tabindex="-1">child_process模块 <a class="header-anchor" href="#child-process模块" aria-label="Permalink to &quot;child_process模块&quot;">​</a></h3>`,40),k=i("ul",null,[i("li",null,[i("p",null,"通过child_process模块，在Node.js应用程序的主进程运行之后，可以开启多个子进程")]),i("li",null,[i("p",null,[i("strong",null,"child_process.spawn(command, [args], [options])")]),i("ul",null,[i("li",null,[i("p",null,"返回一个隐式创建的代表子进程的ChildProcess对象")]),i("li",null,[i("p",null,"command - 字符串，用于指定需要运行的命令")]),i("li",null,[i("p",null,"args - 数组，存放运行该命令时需要的参数")]),i("li",null,[i("p",null,"options - 对象，指定开启子进程时使用的选项"),i("ul",null,[i("li",null,"cwd - 字符串，指定子进程的当前工作目录"),i("li",null,[i("strong",null,"stdio"),s(" - 字符串或三个元素的数组，设置子进程的标准输入/输出 "),i("ul",null,[i("li",null,[s("三个元素可指定的值主要包括 "),i("ul",null,[i("li",null,"pipe - 在父子进程之间创建一个管道"),i("li",null,"ipc - 在父子进程间创建一个专用于传递消息或文件描述符的IPC通道"),i("li",null,"ignore - 指定不为子进程设置文件描述符"),i("li",null,"Stream - 指定子进程与父进程共享一个终端设备"),i("li",null,"null/undefined - 使用默认值")])]),i("li",null,[s("Example: child_process.spawn('prg', [], { stdio: ['pipe', 'pipe', process.stderr] }) "),i("ul",null,[i("li",{"stdio:":"",inherit:""},[s("stdio属性值常见值 - "),i("ul",null,[i("li",null,"'ignore' = ['ignore', 'ignore', 'ignore']"),i("li",null,"'pipe' = ['pipe', 'pipe', 'pipe']"),i("li",null,"'inherit' = [process.stdin, process.stdout, process.stderr]")])])])])])]),i("li",null,'env - 对象，用于以"键名/键值"的形式为子进程指定环境变量'),i("li",null,[i("strong",null,"detached"),s(" - 布尔值，当设置为true时，该子进程为进程组中的领头进程(领头进程：当父进程不存在时，子进程也可独立存在)。默认值为false。 "),i("ul",null,[i("li",null,"默认情况下，只有在子进程全部退出后，父进程才能退出"),i("li",null,[s("为了可以让父进程先退出 "),i("ul",null,[i("li",null,"detached设置为true"),i("li",null,"还需调用子进程对象的unref方法允许父进程退出")])])])])])]),i("li",null,[i("p",null,"使用示例"),i("div",{class:"language-javascript vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"javascript"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"test1.js")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"process.stdout."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"write"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'子进程当前工作目录为：'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"process."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"cwd"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"())")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"process.argv."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"forEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"index"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"array"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  process.stdout."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"write"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\r\\n"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"：'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"index"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"': '"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"val)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"test2.js")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," fs"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," require"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'fs'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," out"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," fs."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"createWriteStream"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'./message.txt'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"process.stdin."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"on"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'data'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", ("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"data"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  out."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"write"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(data)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"process.stdin."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"on"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'end'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", ("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"data"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  process."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"exit"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"spawn方法示例")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," cp"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," require"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'child_process'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," sp1"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," cp."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"spawn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'node'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'test1.js'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'one'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'two'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'three'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'four'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"], {cwd: "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'./test'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," sp2"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," cp."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"spawn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'node'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'test2.js'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"], {stdio: "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'pipe'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"sp1.stdout."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"on"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'data'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", ("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"data"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  console."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"log"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'子进程标准输出：'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," data)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  sp2.stdin."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"write"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(data)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  sp1."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kill"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"sp1."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"on"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'exit'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", ("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"code"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"signal"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"  if"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"!"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"code) {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  	console."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"log"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'子进程退出，退出信号为：'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," signal)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  } "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"else"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  	console."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"log"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'子进程退出，退出代码为：'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," code)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  process."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"exit"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"sp1."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"on"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'error'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", ("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"err"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  console."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"log"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'子进程开启失败：'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," err)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  process."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"exit"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 如果stdio属性有ipc，那么，当该通道关闭时，将触发子进程的对象的disconnect事件")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"sp1."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"on"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'disconnect'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", () "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  console."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"log"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'IPC通道被关闭'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")])])])])])])]),i("li",null,[i("p",null,[i("strong",null,"child_process.fork(modulePath, [args], [options])")]),i("ul",null,[i("li",null,[s("开启一个专用于运行Node.js中的"),i("strong",null,"模块文件"),s("的子进程 "),i("ul",null,[i("li",null,[s("返回一个隐式创建的代表子进程的ChildProcess对象 "),i("ul",null,[i("li",null,[s("child.send(message, [sendHandle]) // 在父进程中向子进程发送消息 "),i("ul",null,[i("li",null,"当子进程对象接收到消息后，触发process对象的message事件"),i("li",null,"process.on('message', (m, setHandle) => {})")])]),i("li",null,"child.on('message', (m,setHandle) => {}) // 在父进程中接收到子进程发送的消息，触发子进程对象的message事件"),i("li",null,"m - message，消息"),i("li",null,[s("sendHandle "),i("ul",null,[i("li",null,"可以为执行的回调函数"),i("li",null,"也可为服务器对象或socket端口对象")])]),i("li",null,"process.send(message, [sendHandle]) // 在父进程中向主进程发送消息")])]),i("li",null,"建议不要在程序中开启大量用于Node.js模块的子进程")])]),i("li",null,"modulePath - 字符串，指定需要运行的Node.js模块文件路径及文件名"),i("li",null,"args - 数组"),i("li",null,[s("options - 指定开启子进程时使用的选项 "),i("ul",null,[i("li",null,"cwd"),i("li",null,"env"),i("li",null,"encoding"),i("li",null,"silent - 布尔值，为false时，父子进程共享标准输入/输出；为true时，子进程使用独立的标准输入/输出")])]),i("li",null,[s("使用示例 "),i("ul",null,[i("li",null,"父子进程间共享HTTP服务器 - 在send方法中发送服务器对象"),i("li",null,"父子进程间共享socket端口对象")])])])]),i("li",null,[i("p",null,[i("strong",null,"child_process.exec(command, [options], [callback])")]),i("ul",null,[i("li",null,[s("开启一个用于运行某个命令的子进程并缓存子进程中的输出结果 "),i("ul",null,[i("li",null,"返回一个隐式创建的代表子进程的ChildProcess对象"),i("li",null,[s("与spawn最大的区别是 "),i("ul",null,[i("li",null,"spawn可以在父进程实时接收子进程输出的标准输出流/错误输出流数据，异步方法"),i("li",null,"exec中，父进程必须等待子进程的标准输出流/错误输出流数据全部缓存完毕后才能接收这些数据，同步方法")])])])]),i("li",null,"command"),i("li",null,"options - cwd、env、encoding、timeout、maxbuffer、killingSignal"),i("li",null,[s("callback - 指定子进程终止时调用的回调函数 "),i("ul",null,[i("li",null,"(error, stdout, stderr) => {}")])])])]),i("li",null,[i("p",null,[i("strong",null,"child_process.execFile(file, [args], [options], [callback])")]),i("ul",null,[i("li",null,[s("开启一个专用于运行某个"),i("strong",null,"可执行文件"),s("的子进程")]),i("li",null,"file - 指定需要运行的可执行文件的执行文件路径及文件名"),i("li",null,"args - 数组"),i("li",null,"options - 与exec中使用的options相同"),i("li",null,"callback - 与exec中使用的callback相同")])])],-1),r=l(`<h3 id="cluster模块" tabindex="-1">cluster模块 <a class="header-anchor" href="#cluster模块" aria-label="Permalink to &quot;cluster模块&quot;">​</a></h3><ul><li><p>cluster模块允许在多个子进程中运行不同的Node.js应用程序</p></li><li><p>cluster.fork([env])</p><ul><li>返回一个隐式创建的worker对象，代表使用fork开启的子进程运行的Node.js应用程序实例对象</li><li>worker对象的方法与事件 <ul><li>worker.send(message, [sendHandle]) //在父进程向子进程发送消息 <ul><li>worker.on(message, [sendHandle])</li></ul></li><li>process.send(message, [sendHandle]) //在子进程向父进程发送消息 <ul><li>process.on(&#39;message&#39;, (m, setHandle) =&gt; {})</li></ul></li><li>worker.kill([signal]) - 可以使用kill强制关闭该worker对应的子进程</li><li>worker.disconnect() - 使该子进程不再接收外部连接</li><li>worker.on(&#39;disconnect&#39;, () =&gt; {})</li><li>worker.on(&#39;online&#39;, () =&gt; {})</li><li>worker.on(&#39;listening&#39;, (address) =&gt; {})</li><li>worker.on(&#39;exit&#39;, (code, signal) =&gt; {})</li><li>worker.suicide - 判断子进程是自动退出(true)还是异常退出</li></ul></li></ul></li><li><p>cluster.on(&#39;fork&#39;, (worker) =&gt; {})</p><ul><li>使用fork开启子进程时，同时触发fork事件，通过回调函数指定子进程开启时所要执行的处理。</li></ul></li><li><p>cluster.on(&#39;online&#39;, (worker) =&gt; {})</p><ul><li>使用fork开启新的子进程后，会向主进程发送一个反馈信息，当主进程收到该反馈信息后，触发online事件</li><li>fork与online的区别在于：主进程中尝试使用fork开启子进程触发fork；主进程中尝试运行子进程中的Node.js应用程序时触发online。</li></ul></li><li><p>cluster.on(&#39;listening&#39;, (worker, address) =&gt; {})</p><ul><li>当在子进程运行的Node.js应用程序中调用服务器的listen方法后，该服务器开始对指定地址及端口进行监听，同时触发listen事件</li></ul></li><li><p>cluster.setupMaster([settings])</p><ul><li>修改子进程中运行的模块文件或修改子进程中运行的Node.js应用程序的其他默认行为</li><li>settings - 对象 <ul><li>exec - 为子进程中运行模板文件的完整路径及文件名，默认属性值为当前正在运行的Node.js应用程序中的主模块文件的完整路径及文件名</li><li>args</li><li>silent</li></ul></li></ul></li><li><p>cluster.settings - 存放了setupMaster中使用的settings参数对象</p></li><li><p>cluster.isMaster - 布尔值，Node.js应用程序的实例对象运行在主进程中，值为true</p></li><li><p>cluster.isWorker - 布尔值，Node.js应用程序的实例对象运行在子进程中，值为true</p></li><li><p>cluster.workers - 获取所有子进程中运行的worker对象</p><ul><li>cluster.worker - 当前子进程中的worker</li><li>cluster.worker.process - 获取当前子进程</li></ul></li><li><p>当在子进程中运行服务器后，客户端请求总是先被主进程接收，然后转发给子进程中的服务器。如果在多个子进程中运行服务器，当主进程接收到客户端请求后，将自动分配给一个当前处于空闲状态的子进程。</p></li></ul><h2 id="node-error-assert" tabindex="-1">node_error&amp;assert <a class="header-anchor" href="#node-error-assert" aria-label="Permalink to &quot;node_error&amp;assert&quot;">​</a></h2><h3 id="错误处理-domain" tabindex="-1">错误处理 - domain <a class="header-anchor" href="#错误处理-domain" aria-label="Permalink to &quot;错误处理 - domain&quot;">​</a></h3><ul><li><p>问题背景</p><ul><li>传统的try...catch无法捕捉异步方法中抛出的异常</li><li>process.on(&#39;uncaughtException&#39;, () =&gt; {})虽然可以处理异步方法中抛出的异常，但方式粗鲁，有可能产生资源、内存泄漏的问题</li></ul></li><li><p>const domain = domain.create()</p><ul><li>返回Domain对象</li></ul></li><li><p>domain.name - 读写该Domain对象的名称</p></li><li><p>domain.on(&#39;error&#39;, (err) =&gt; {})</p></li><li><p>domain.run(fn)</p><ul><li>fn - 当该函数中触发任何错误时，将被Domain对象捕获</li></ul></li><li><p>domain.add(emitter) - 显式绑定</p><ul><li>隐式绑定与显式绑定</li><li>emitter - 既可以继承了EventEmitter类的实例对象，也可是setInterval和setTimeout返回的定时器</li></ul></li><li><p>domain.remove(emitter) - 取消绑定</p><ul><li>解除之后，之后实例对象触发错误将不会被Domain对象所捕获</li></ul></li><li><p>domain.bind(callback)</p><ul><li>绑定回调函数</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./test.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,domain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}))</span></span></code></pre></div></li><li><p>domain.intercept(callback)</p><ul><li>拦截回调函数</li><li>与bind的区别：使用bind，回调函数中必须使用throw抛出该错误，而intercept则是直接拦截</li></ul></li><li><p>domain._stack - 查看domain堆栈中的内容</p></li><li><p>domain.exit()</p><ul><li>将该Domain对象从堆栈中弹出，不再捕获任何错误</li><li>如果在Domain对象中嵌套使用其他Domain对象，则在最外层的Domain对象的exit方法被调用后，该对象及其内部嵌套的所有Domain对象都被弹出domain堆栈，所有的Domain对象都不能再捕获任何错误</li></ul></li><li><p>domian.enter()</p><ul><li>将该Domain对象推入堆栈，并将该Domain对象变为当前使用的Domain对象</li><li>如果在一个Domain对象监听的函数中使用另一个Domain对象的enter方法，另一个Domain对象将被推入到domain堆栈中，然后改为使用该Domain对象来捕捉第一个Domain对象所监听的函数中抛出的错误</li></ul></li><li><p>domain.dispose() - 销毁Domain对象</p></li></ul><h3 id="断言处理-assert" tabindex="-1">断言处理 - assert <a class="header-anchor" href="#断言处理-assert" aria-label="Permalink to &quot;断言处理 - assert&quot;">​</a></h3><ul><li>断言处理就是书写一些判断用测试代码，<strong>如果判断结果为假，则抛出AssertionError异常</strong></li><li>判断两个值是否相等，内部使用&quot;===&quot;判断 <ul><li>assert.equal(actual, expected, [message])</li><li>assert.notEqual(actual, expected, [message]) <ul><li>actual - 实际值</li><li>expected - 预期值</li><li>message - 自定义异常信息</li></ul></li></ul></li><li>判断两个数据是否值、类型相等 <ul><li>assert.strictEqual(actual, expected, [message])</li><li>assert.notStrictEqual(actual, expected, [message])</li></ul></li><li>直接判断某个值是否为真 <ul><li>assert.ok(value, [message])</li><li>assert(value, [message])</li></ul></li><li>判断两个值是否相等，深层次比较 <ul><li>assert.deepEqual(actual, expected, [message])</li><li>assert.notDeepEqual(actual, expected, [message])</li><li>比较规则： <ul><li>简单类型(字符串、数值、布尔值、null与undefined) - 内部使用&quot;===&quot;进行判断</li><li>数组 - 内部使用&quot;===&quot;进行判断</li><li>对象 - 比较他们的属性长度和属性值</li><li>缓存区对象 - 先比较长度，然后逐字节比较缓存区中的内容</li></ul></li></ul></li><li>执行一个函数中的代码并判断该函数中是否会(不会)抛出一个异常。 <ul><li>assert.throws(block, [error], [mesage]) <ul><li>如果函数中抛出异常，则不抛出AssertionError异常</li></ul></li><li>assert.doesNotThrow(block, [error], [mesage])</li><li>block - 执行的函数</li><li>error - 返回true或false的函数，用于控制是否抛出在第一个参数值函数中指定抛出的异常，如果返回的是false则抛出该异常</li></ul></li></ul><h2 id="node-crypto-zlib" tabindex="-1">node_crypto&amp;zlib <a class="header-anchor" href="#node-crypto-zlib" aria-label="Permalink to &quot;node_crypto&amp;zlib&quot;">​</a></h2><h3 id="crypto" tabindex="-1">crypto <a class="header-anchor" href="#crypto" aria-label="Permalink to &quot;crypto&quot;">​</a></h3><ul><li>crypto.getCiphers() - 查看Node.js中能够使用的所有加密算法。</li><li>crypto.getHashes() - 查看Node.js中能够使用的所有散列算法。</li><li>私钥的拥有者可以在数据发送前先对该数据进行签名操作，签名过程中将对这段数据进行加密处理。数据的接收者可以通过公钥的使用对该签名进行解密及验证操作，<strong>以确保这段数据是私钥的拥有者所发出原始数据且在网络的传输过程中未被修改</strong>。</li></ul><h4 id="散列算法" tabindex="-1">散列算法 <a class="header-anchor" href="#散列算法" aria-label="Permalink to &quot;散列算法&quot;">​</a></h4><ul><li>const hash = crypto.createHash(algorithm) <ul><li>algorithm - sha1,md5,sha256,sha512,ripemd160等</li></ul></li><li>hash.update(data, [input_encoding]) <ul><li>创建摘要</li><li>data - 一个Buffer对象或者字符串</li><li>input_encoding - &#39;utf8&#39;, &#39;ascii&#39;, &#39;binary&#39;</li></ul></li><li>hash.digest([encoding]) <ul><li>输出摘要内容，使用了digest之后就不能再向对象中追加摘要内容，即hash这个对象后续不能再被使用</li><li>encoding - &#39;hex&#39;, &#39;base64&#39;, &#39;binary&#39;</li></ul></li></ul><h4 id="hmac算法" tabindex="-1">HMAC算法 <a class="header-anchor" href="#hmac算法" aria-label="Permalink to &quot;HMAC算法&quot;">​</a></h4><ul><li>将散列和密钥结合，阻止对签名完整性的破坏</li><li>const hmac = crypto.createHmac(algorithm, key) <ul><li>key - 字符串， 指定一个PEM格式的密钥</li></ul></li><li>hmac.update(data)</li><li>hmac.digest([encoding])</li></ul><h4 id="公钥加密" tabindex="-1">公钥加密 <a class="header-anchor" href="#公钥加密" aria-label="Permalink to &quot;公钥加密&quot;">​</a></h4><ul><li>Cipher类：加密数据 <ul><li>const cipher = crypto.createCipher(algorithm, password) <ul><li>algorithm - blowfish, aes-256-cbc等</li><li>password - 指定加密时所使用的密码，二进制格式的字符串或Buffer对象</li></ul></li><li>const cipher = crypto.createCipheriv(algorithm, password, iv) <ul><li>iv - 指定加密时所使用的初始向量，二进制格式的字符串或Buffer对象</li></ul></li><li>cipher.update(data, [input_encoding], [output_encoding]) <ul><li>input_encoding - &#39;utf8&#39;, &#39;ascii&#39;, &#39;binary&#39;</li><li>output_encoding - &#39;hex&#39;, &#39;base64&#39;, &#39;binary&#39;</li><li>可使用update多次添加需要加密的数据，与hash和hmac不同的是，cipher的update总是返回一个被分块的数据。 <ul><li>如果加密的数据字节数足够创建一个及以上的块，返回被加密的数据</li><li>如果不足以创建一个块，加密数据将被缓存在cipher对象中</li></ul></li></ul></li><li>cipher.final([output_encoding]) <ul><li>最终返回加密数据</li></ul></li></ul></li><li>Decipher类：解密数据 <ul><li>const decipher = crypto.createDecipher(algorithm, password)</li><li>const decipher = crypto.createDecipheriv(algorithm, password, iv)</li><li>decipher.update(data, [input_encoding], [output_encoding])</li><li>decipher.final([output_encoding])</li></ul></li><li>Sign类：生成签名 <ul><li>const sign = crypto.createSign(algorithm) <ul><li>algorithm - RSA-SHA256</li></ul></li><li>sign.update(data)</li><li>sign.sign(private_key, [output_format]) <ul><li>private_key - 字符串，指定PEM格式的私钥</li><li>output_format - &#39;hex&#39;, &#39;base64&#39;, &#39;binary&#39;</li></ul></li></ul></li><li>Verify类：验证签名 <ul><li>const verify = crypto.createVerify(algorithm) <ul><li>algorithm - RSA-SHA256</li></ul></li><li>verify.update(data)</li><li>verify.verify(object, signature, [signature_format]) <ul><li>返回结果为布尔值</li><li>object - 字符串，公钥</li><li>signature - 签名对象</li></ul></li></ul></li></ul><h3 id="zlib" tabindex="-1">zlib <a class="header-anchor" href="#zlib" aria-label="Permalink to &quot;zlib&quot;">​</a></h3><ul><li><p>创建各种用于压缩及解压缩的对象，均为既可用于读取流数据的对象，又可用于写入流数据的对象</p><ul><li><p>zlib.createGzip([options]) - 压缩</p><ul><li>zlib.createGunzip([options]) - 解压</li></ul></li><li><p>zlib.createDeflate([options]) - 压缩</p><ul><li>zlib.createInflate([options]) - 解压</li></ul></li><li><p>zlib.createDeflateRaw([options]) - 压缩</p><ul><li>zlib.createInflateRaw([options]) - 解压</li></ul></li><li><p>zlib.createUnzip([options]) - 解压</p><ul><li>即可解压Gzip的也可以解压Deflate的</li></ul></li><li><p>options - 指定压缩或解压数据时所使用的选项</p><ul><li>flush</li><li>chunkSize</li><li>windowBits</li><li>level</li><li>memLevel</li><li>strategy</li></ul></li><li><p>压缩解压缩代码示例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> zlib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zlib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用Gzip对象压缩文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gzip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zlib.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createGzip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test.txt.gz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gzip).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用Gunzip对象解压缩文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gunzip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zlib.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createGunzip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test.txt.gz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gunzip).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out)</span></span></code></pre></div></li></ul></li><li><p>各种用于压缩或解压缩数据的方法，这些方法不再使用options，使用各种默认选项</p><ul><li>zlib.gzip(buf, callback) <ul><li>zlib.gunzip(buf, callback)</li><li>callback - (err, buffer) =&gt; {} <ul><li>buffer - 解压或解压缩的结果</li></ul></li></ul></li><li>zlib.deflate(buf, callback) <ul><li>zlib.inflate(buf, callback)</li></ul></li><li>zlib.deflateRaw(buf, callback) <ul><li>zlib.inflateRaw(buf, callback)</li></ul></li><li>zlib.unzip(buf, callback)a</li></ul></li></ul><h2 id="node-other" tabindex="-1">node_other <a class="header-anchor" href="#node-other" aria-label="Permalink to &quot;node_other&quot;">​</a></h2><h3 id="dns-查找解析域名" tabindex="-1">dns - 查找解析域名 <a class="header-anchor" href="#dns-查找解析域名" aria-label="Permalink to &quot;dns - 查找解析域名&quot;">​</a></h3><ul><li>dns.resolve(domain, [rrtype], callback) <ul><li>将域名解析为一组DNS记录</li><li>domain - 字符串，指定需要被解析的域名</li><li>rrtype - 字符串，指定需获取的记录类型，每个类型都有省略该参数的对应便捷方法 <ul><li>&#39;A&#39; - dns.resolve4(domain, callback)，用于获取类型为A的DNS记录，即IPv4地址</li><li>&#39;AAAA&#39; - dns.resolve6(domain, callback)，用于获取类型为AAAA的DNS记录，即IPv6地址</li><li>CNAME - dns.resolveCname(domain, callback)，获取别名记录</li><li>MX - dns.resolveMx(domain, callback)，获取Mx记录，即邮件交换服务器记录</li><li>TXT - dns.resolveTxt(domain, callback)，获取TXT记录，即为该域名附加的描述信息</li><li>SRV - dns.resolveSrv(domain, callback)，获取SRV记录，即服务记录</li><li>NS - dns.resolveNs(domain, callback)，获取NS记录，即域名服务器记录</li><li>PTR - PTR记录用于反向地址解析，该记录将一个域名映射为一个IPv4地址</li></ul></li><li>callback - (err, addresses) =&gt; {} - addresses，存放获取到的DNS记录的数组</li></ul></li><li>dns.lookup(domain, [family], callback) <ul><li>获取第一个被发现的IPv4地址或IPv6地址</li><li>family - 整数值，4或6</li><li>callback - (err, address, family) =&gt; {}</li></ul></li><li>dns.reverse(ip, (err, domains) =&gt; {}) <ul><li>将一个IP地址反向解析为一组与该IP地址绑定的域名</li></ul></li><li>dns模块中的各种错误代码 - err.code <ul><li>ENODATA - DNS服务器返回一个没有数据的查询结果</li><li>ENOTFOUND - 未发现任何域名</li><li>......</li></ul></li></ul><h3 id="punycode" tabindex="-1">punycode <a class="header-anchor" href="#punycode" aria-label="Permalink to &quot;punycode&quot;">​</a></h3><ul><li>将域名从地方语言所采用的各种编码转换为可用于DNS服务器的punycode编码</li><li>punycode.encode(string) - Unicode编码-&gt;punycode编码 <ul><li>punycode.decode(string) - punycode编码-&gt;Unicode编码</li></ul></li><li>punycode.toASCII(domain) - 将Unicode格式的域名转换为punycode格式的域名 <ul><li>punycode.toUnicode(domain)</li></ul></li><li>punycode.ucs2.encode(codePoints) - 将UCS-2编码数组转换为一个字符串 <ul><li>punycode.ucs2.decode(string)</li></ul></li><li>punycode.version - 属性值为Node.js内部使用的Punycode.js类库的版本号</li></ul><h3 id="os" tabindex="-1">os <a class="header-anchor" href="#os" aria-label="Permalink to &quot;os&quot;">​</a></h3><ul><li>该模块中的各种方法用于获取运行应用程序的操作系统的各种信息</li><li>os.tmpdir() - 获取操作系统中的默认的用于存放临时文件的目录</li><li>os.endianness() - 获取CPU的字节序，返回结果可能为&quot;BE&quot;及&quot;LE&quot;</li><li>os.hostname() - 获取计算机名</li><li>os.type() - 获取操作系统类型</li><li>os.platform() - 获取操作系统平台</li><li>os.arch() - 获取CPU架构</li><li>os.release() - 返回操作系统版本号</li><li>os.uptime() - 返回系统的当前运行时间</li><li>os.loadavg() - 返回存放1分钟、5分钟及15分钟的系统平均负载的数组</li><li>os.totalmem() - 返回系统的总内存量</li><li>os.freemem() - 返回系统的空闲内存量</li><li>os.cpus() - 返回存放了所有CPU内核的各种信息的数组</li><li>os.networkInterfaces() - 返回存放了系统中所有网络接口的数组</li><li>os.EOL - 常量值为操作系统中使用的换行符</li></ul><h3 id="readline" tabindex="-1">readline <a class="header-anchor" href="#readline" aria-label="Permalink to &quot;readline&quot;">​</a></h3>`,26),p=i("ul",null,[i("li",null,[i("p",null,"readline模块中通过Interface对象的使用来实现逐行读取流数据的处理")]),i("li",null,[i("p",null,"const rl = readline.createInterface(options)"),i("ul",null,[i("li",null,[i("p",null,"options配置选项"),i("ul",null,[i("li",null,"input - 为一个可用来读取流数据的对象，指定读入数据的来源"),i("li",null,"output - 为一个可用来写入流数据的对象，指定数据的输出目标"),i("li",null,"completer - 为一个函数，指定Tab补全处理")]),i("div",{class:"language-javascript vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"javascript"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," readline"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," require"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'readline'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," completer"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," () "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"  const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," completions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'help error quit aaa bbb ccc'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"split"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"' '"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"  const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," hits"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," completions."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"filter"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"c"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," c."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"indexOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(line) "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"==="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 0"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"  return"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," [hits, line]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," rl"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," readline."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"createInterface"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  input: process.stdin,")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  output: process.stdout,")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  completer")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rl."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"on"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'line'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", ("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"line"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"  if"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (line "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"==="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'exit'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ||"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," line "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"==="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'quit'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ||"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," line "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"==="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'q'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rl."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"close"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  } "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"else"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    console."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"log"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'您输入了：'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"line)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")])])])]),i("ul",null,[i("li",null,"terminal - 布尔类型属性")]),i("div",{class:"language-javascript vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"javascript"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," readline"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," require"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'readline'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," fs"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," reuqire"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'fs'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," file"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," fs."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"createReadStream"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'./message.txt'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," out"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," fs."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"createReadStream"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'./anotherMessage.txt'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"let"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," index "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 1")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"out."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"write"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'line'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," index."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ':'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"index "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 1")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"const"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," rl"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," readline."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"createInterface"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  input: file,")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  output: out,")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  terminal: "),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"true")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rl."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"on"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'line'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", ("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"line"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  out."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"write"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'line'"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," index."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ':'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  index "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 1")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")])])])])]),i("li",null,[i("p",null,"rl.on('line', (line) => {})"),i("ul",null,[i("li",null,'将Interface对象读取到一个"\\n"字符时，表示该行数据读取结束，触发该对象的line事件。')])]),i("li",null,[i("p",null,"rl.on('close', () => {})"),i("ul",null,[i("li",null,[s("以下几种情况发生将触发Interface对象的close事件 "),i("ul",null,[i("li",null,"调用Interface对象的close方法"),i("li",null,"Interface对象的input属性值对象的end事件被触发"),i("li",null,"Interface对象接收到一个EOT信号"),i("li",null,"Interface对象接收到一个SIGINT信号")])])])]),i("li",null,[i("p",null,"rl.pause() & rl.resume()")]),i("li",null,[i("p",null,"rl.write(data, [key])"),i("ul",null,[i("li",null,"可以向options参数对象的output属性值目标对象中写入一些数据"),i("li",{"ctrl:":"","true.":"","name:":"",u:""},"key - 一个对象，用于在终端环境中模拟一个按键操作，例如"),i("li",null,"rl.removeAllListeners('line') - 移除该对象的line事件回调函数")])]),i("li",null,[i("p",null,"rl.setPrompt(prompt, [length])"),i("ul",null,[i("li",null,"用于在终端环境下定制一个命令提示符，通常与rl.prompt()配合使用"),i("li",null,"rl.prompt() - 在一个新行中显示命令提示符")])]),i("li",null,[i("p",null,"rl.question(query, (answer) => {})")]),i("li",null,[i("p",null,"信号事件"),i("ul",null,[i("li",null,"当options中的input属性值对象接收到一个信号时，将触发Interface对象的信号事件")])])])])],-1),d=l(`<h3 id="util" tabindex="-1">util <a class="header-anchor" href="#util" aria-label="Permalink to &quot;util&quot;">​</a></h3><ul><li><p>util.format(format, [...]) - 返回经过格式化处理的字符串</p><ul><li>format - 格式化字符串(%s,%d,%j,%%)</li><li>[...] - 其他需格式化的参数值</li></ul></li><li><p>以下四个方法均为同步方法，会阻塞当前线程</p><ul><li>util.debug(string) - 将一个字符串作为标准错误输出流进行输出</li><li>util.error([...]) - 将一个数组中的多个字符串作为标准错误输出流进行输出</li><li>util.log(string) - 将一个字符串作为标准输出流进行输出，会在输出该字符串之前输出系统当前时间</li><li>util.puts([...]) &amp; util.print([...]) <ul><li>将一个数组中的多个字符串作为标准输出流进行输出</li></ul></li></ul></li><li><p><strong>util.inspect(object, [options])</strong></p><ul><li><p>返回一个包含该对象信息的字符串</p></li><li><p>object - 指定需要被查看的信息的对象</p></li><li><p>options - 指定查看对象信息时所使用的各种选项</p><ul><li>showHidden - 布尔类型，当该值为true时，对象信息中包含该对象的不可枚举的属性及属性值</li><li>depth - 整数，当查看的对象信息具有阶层关系时，该属性值指定被查看的对象信息的深度</li><li>colors - 布尔类型，为true时，在输出该对象信息是将对该对象的各种属性值应用各种颜色</li><li>customInspect - 布尔类型，为true时，在查看对象信息时将调用对于被查看信息对象自定义的Inspect方法</li></ul></li><li><p>可使用util.inspect.styles与util.inspect.colors对象来定义属性值的各种颜色或字体</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">util.inspect.styles.string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;red&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(util.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parent, {showHidden: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, depth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, colors: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span></code></pre></div></li></ul></li><li><p>util.isArray(object)</p></li><li><p>util.isRegExp(object)</p></li><li><p>util.isDate(object)</p></li><li><p>util.isError(object)</p></li><li><p>util.inherits(constructor, superConstructor)</p><ul><li>该方法将一个父类的方法继承给该父类的子类</li></ul></li></ul><h3 id="vm" tabindex="-1">vm <a class="header-anchor" href="#vm" aria-label="Permalink to &quot;vm&quot;">​</a></h3><ul><li>vm模块中提供了两个用于运行JavaScript脚本代码的方法 <ul><li>vm.runInThisContext(code, [filename])</li><li>vm.runInNewContext(code, [sandbox], [filename]) <ul><li>sandbox - 对象，用于指定独立的上下文环境</li></ul></li><li>const context = vm.createContext([initSandbox]) <ul><li>为了维护一个独立的上下文环境中的初始状态，提供了createContext方法</li><li>vm.runInContext(code, context)</li></ul></li></ul></li><li>创建并使用Script对象 <ul><li>const script = vm.createScript(code, [filename]) <ul><li>编译一段代码但是不运行该代码</li><li>运行的方法 <ul><li>script.runInThisContext()</li><li>script.runInNewContext([sandbox])</li></ul></li></ul></li></ul></li></ul><h3 id="repl-start-自定义运行环境" tabindex="-1">repl.start - 自定义运行环境 <a class="header-anchor" href="#repl-start-自定义运行环境" aria-label="Permalink to &quot;repl.start - 自定义运行环境&quot;">​</a></h3><ul><li>repl.start(options) <ul><li>返回一个REPL运行环境的实例对象</li><li>options中的选项包括 <ul><li>prompt - 用于修改REPL运行环境中的命令提示符</li><li>input - 默认选项process.stdin，指定需要用来读入流数据的对象</li><li>output - 默认选项process.stdout，指定需要用来写入输出流数据的对象</li><li>terminal - 布尔类型</li><li>writer - 函数，指定在输出表达式运行结果时用于格式化运行结果以及对运行结果使用各种颜色的函数</li><li>useColors - 布尔类型，用于指定在使用默认的writer属性值，即util.inspect方法输出表达式的执行结果时是否使用颜色</li><li>useGlobal - 布尔类型，默认值false，值为false时开启一个独立的上下文运行环境并且在该运行环境中运行所有代码，这些代码不可访问当运行环境开启之后开发者在全局作用域中定义的的变量值或对象</li><li>eval - 函数，指定对输入表达式的执行方法</li><li>ignoreUndefined - 布尔类型，为true时，如果表达式的执行结果为undefined,则REPL运行环境中不再显示该执行结果</li></ul></li></ul></li></ul>`,6),o=[h,k,r,p,d];function E(u,g,c,y,F,m){return e(),t("div",null,o)}const b=a(n,[["render",E]]);export{C as __pageData,b as default};
