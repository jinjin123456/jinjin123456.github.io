import{_ as e,c as a,o as r,ae as d}from"./chunks/framework.Cd-3tpCq.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/07泛前端/index.md","filePath":"frontend/07泛前端/index.md"}'),n={name:"frontend/07泛前端/index.md"};function i(o,t,l,c,h,s){return r(),a("div",null,t[0]||(t[0]=[d('<h2 id="一、核心定义" tabindex="-1">一、核心定义 <a class="header-anchor" href="#一、核心定义" aria-label="Permalink to &quot;一、核心定义&quot;">​</a></h2><ul><li><p>微前端（Micro Frontends） 定义：将大型前端应用拆分为多个独立的小型应用（子应用），每个子应用可独立开发、部署和运行，最终组合成完整系统。 核心目标：解决单体架构的臃肿问题，支持团队自治和技术栈异构。 典型场景：企业级后台系统、复杂电商平台（如多团队协作的订单、商品、用户管理模块）。</p></li><li><p>泛前端（Frontend Expansion） 定义：前端技术栈（HTML/CSS/JS）向非传统Web领域的扩展应用，如桌面端、移动端、嵌入式等。 核心目标：复用前端技术能力，降低跨平台开发成本。 典型场景：Electron桌面应用、React Native移动应用、智能终端HMI界面。</p></li></ul><h2 id="二、区别对比" tabindex="-1">二、区别对比 <a class="header-anchor" href="#二、区别对比" aria-label="Permalink to &quot;二、区别对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>维度</th><th>微前端</th><th>泛前端</th></tr></thead><tbody><tr><td>技术范畴</td><td>前端架构设计模式</td><td>前端技术栈的应用领域扩展</td></tr><tr><td>核心问题</td><td>解决代码耦合与团队协作问题</td><td>解决跨平台开发的技术壁垒</td></tr><tr><td>技术实现</td><td>模块联邦（Module Federation）、iframe、Single-SPA</td><td>Electron、Flutter、React Native</td></tr><tr><td>典型工具</td><td>Webpack Module Federation、Qiankun</td><td>Electron、Tauri、Capacitor</td></tr></tbody></table><h2 id="三、联系与协同" tabindex="-1">三、联系与协同 <a class="header-anchor" href="#三、联系与协同" aria-label="Permalink to &quot;三、联系与协同&quot;">​</a></h2><ul><li><p>技术栈重叠 两者均依赖前端基础技术（如React/Vue），例如： 微前端的子应用可能用React开发； 泛前端的Electron应用同样使用React构建界面。</p></li><li><p>组合使用案例 案例：VS Code（Electron） + 插件系统（微前端） VS Code本身是泛前端技术（Electron）开发的桌面应用； 其插件系统允许第三方开发者通过独立模块（微前端模式）扩展功能，如GitLens、ESLint插件。</p></li></ul><h2 id="四、具体案例说明" tabindex="-1">四、具体案例说明 <a class="header-anchor" href="#四、具体案例说明" aria-label="Permalink to &quot;四、具体案例说明&quot;">​</a></h2><ul><li><p>微前端案例：阿里飞猪旅行 背景：飞猪需整合机票、酒店、签证等多个业务模块，各团队技术栈不同（Vue/React）。 方案： 使用Qiankun框架，将各业务作为独立子应用加载； 主应用仅提供导航和共享依赖（如用户鉴权）。 效果：模块独立部署，团队协作效率提升30%。</p></li><li><p>泛前端案例：Figma设计工具 背景：需实现高性能跨平台（Web/桌面）设计工具。 方案： 核心编辑器使用WebAssembly+C++提升性能； 桌面端通过Electron封装Web版，复用90%代码。 效果：一套代码覆盖Web、macOS、Windows。</p></li></ul><h2 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">​</a></h2><p>微前端是“分”：拆解复杂系统，实现模块化； 泛前端是“扩”：突破浏览器限制，覆盖多端场景。 结合价值：在大型项目中（如IDE、电商平台），可先用泛前端技术选型（如Electron），再通过微前端管理模块化功能，兼顾效率与灵活性。</p>',10)]))}const b=e(n,[["render",i]]);export{p as __pageData,b as default};
