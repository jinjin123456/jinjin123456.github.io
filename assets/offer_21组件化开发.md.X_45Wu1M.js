import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Cd-3tpCq.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"offer/21组件化开发.md","filePath":"offer/21组件化开发.md"}'),l={name:"offer/21组件化开发.md"};function e(h,s,p,k,r,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="vue-项目公共业务组件封装思路分析" tabindex="-1">Vue 项目公共业务组件封装思路分析 <a class="header-anchor" href="#vue-项目公共业务组件封装思路分析" aria-label="Permalink to &quot;Vue 项目公共业务组件封装思路分析&quot;">​</a></h2><h3 id="_1-组件架构层次设计" tabindex="-1">1. <strong>组件架构层次设计</strong> <a class="header-anchor" href="#_1-组件架构层次设计" aria-label="Permalink to &quot;1. **组件架构层次设计**&quot;">​</a></h3><p>该项目采用了清晰的三层组件架构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>components/</span></span>
<span class="line"><span>├── base/           # 基础布局组件</span></span>
<span class="line"><span>├── common/         # 通用业务组件  </span></span>
<span class="line"><span>├── charts/         # 图表专用组件</span></span>
<span class="line"><span>├── pageComponents/ # 页面级业务组件</span></span>
<span class="line"><span>└── progressAffix/  # 特殊功能组件</span></span></code></pre></div><h3 id="_2-核心封装思路" tabindex="-1">2. <strong>核心封装思路</strong> <a class="header-anchor" href="#_2-核心封装思路" aria-label="Permalink to &quot;2. **核心封装思路**&quot;">​</a></h3><h4 id="a-配置化驱动的组件设计" tabindex="-1"><strong>A. 配置化驱动的组件设计</strong> <a class="header-anchor" href="#a-配置化驱动的组件设计" aria-label="Permalink to &quot;**A. 配置化驱动的组件设计**&quot;">​</a></h4><p><strong>核心特色：通过配置对象驱动组件渲染</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表格组件使用示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tableOption</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getData: getTableData,        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据获取方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  params: searchParams,         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 请求参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pageParams: {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分页配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  orderParams: {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 排序配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  immediate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否立即执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  page: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   // 是否启用分页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="b-工厂模式的组件创建" tabindex="-1"><strong>B. 工厂模式的组件创建</strong> <a class="header-anchor" href="#b-工厂模式的组件创建" aria-label="Permalink to &quot;**B. 工厂模式的组件创建**&quot;">​</a></h4><p>使用 <code>createForm.ts</code> 作为组件工厂：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: renderInput,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  select: renderSelect,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  datePicker: renderDatePicker,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  button: renderButton,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... 更多组件类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>优势</strong>：</p><ul><li>统一的组件创建方式</li><li>易于扩展新的组件类型</li><li>集中管理组件渲染逻辑</li></ul><h4 id="c-tsx-vue-sfc-混合开发模式" tabindex="-1"><strong>C. TSX + Vue SFC 混合开发模式</strong> <a class="header-anchor" href="#c-tsx-vue-sfc-混合开发模式" aria-label="Permalink to &quot;**C. TSX + Vue SFC 混合开发模式**&quot;">​</a></h4><p><strong>渲染逻辑用 TSX</strong>：灵活的动态渲染</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> formItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">modelObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{modelObj[item.bind]} </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      placeholder={\`请输入\${item.label}\`}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {...nodeProps} </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>组件结构用 SFC</strong>：清晰的组件定义和生命周期</p><h3 id="_3-组件抽象层级" tabindex="-1">3. <strong>组件抽象层级</strong> <a class="header-anchor" href="#_3-组件抽象层级" aria-label="Permalink to &quot;3. **组件抽象层级**&quot;">​</a></h3><h4 id="第一层-原子组件-ncomponent" tabindex="-1"><strong>第一层：原子组件</strong>（nComponent） <a class="header-anchor" href="#第一层-原子组件-ncomponent" aria-label="Permalink to &quot;**第一层：原子组件**（nComponent）&quot;">​</a></h4><ul><li>基础表单控件的统一封装</li><li>标准化的 props 接口</li><li>通用的事件处理</li></ul><h4 id="第二层-分子组件-ntable、nform、nformdialog" tabindex="-1"><strong>第二层：分子组件</strong>（nTable、nForm、nFormDialog） <a class="header-anchor" href="#第二层-分子组件-ntable、nform、nformdialog" aria-label="Permalink to &quot;**第二层：分子组件**（nTable、nForm、nFormDialog）&quot;">​</a></h4><ul><li>业务场景的组合性组件</li><li>内置常用业务逻辑</li><li>可配置的功能模块</li></ul><h4 id="第三层-页面组件-pagecomponents" tabindex="-1"><strong>第三层：页面组件</strong>（pageComponents） <a class="header-anchor" href="#第三层-页面组件-pagecomponents" aria-label="Permalink to &quot;**第三层：页面组件**（pageComponents）&quot;">​</a></h4><ul><li>特定业务场景的完整组件</li><li>组合多个分子组件</li><li>包含完整的业务流程</li></ul><h3 id="_4-数据驱动的接口设计" tabindex="-1">4. <strong>数据驱动的接口设计</strong> <a class="header-anchor" href="#_4-数据驱动的接口设计" aria-label="Permalink to &quot;4. **数据驱动的接口设计**&quot;">​</a></h3><h4 id="统一的接口规范" tabindex="-1"><strong>统一的接口规范</strong>： <a class="header-anchor" href="#统一的接口规范" aria-label="Permalink to &quot;**统一的接口规范**：&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> formItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  bind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 绑定字段</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  componentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件类型</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 标签文本</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 选项数据</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  hidden</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否隐藏</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义渲染</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clickFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 点击事件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... 更多配置项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="灵活的扩展机制" tabindex="-1"><strong>灵活的扩展机制</strong>： <a class="header-anchor" href="#灵活的扩展机制" aria-label="Permalink to &quot;**灵活的扩展机制**：&quot;">​</a></h4><ul><li><code>render</code> 函数支持完全自定义渲染</li><li><code>slots</code> 函数支持插槽扩展</li><li><code>clickFn</code> 等事件回调支持自定义逻辑</li></ul><h3 id="_5-业务逻辑抽象" tabindex="-1">5. <strong>业务逻辑抽象</strong> <a class="header-anchor" href="#_5-业务逻辑抽象" aria-label="Permalink to &quot;5. **业务逻辑抽象**&quot;">​</a></h3><h4 id="表格组件的业务抽象" tabindex="-1"><strong>表格组件的业务抽象</strong>： <a class="header-anchor" href="#表格组件的业务抽象" aria-label="Permalink to &quot;**表格组件的业务抽象**：&quot;">​</a></h4><ul><li><strong>自动分页处理</strong>：内置分页逻辑和参数管理</li><li><strong>排序功能</strong>：自动处理排序参数和UI状态</li><li><strong>加载状态</strong>：统一的loading状态管理</li><li><strong>错误处理</strong>：标准化的错误处理流程</li></ul><h4 id="表单组件的业务抽象" tabindex="-1"><strong>表单组件的业务抽象</strong>： <a class="header-anchor" href="#表单组件的业务抽象" aria-label="Permalink to &quot;**表单组件的业务抽象**：&quot;">​</a></h4><ul><li><strong>验证集成</strong>：与Element Plus验证无缝集成</li><li><strong>数据绑定</strong>：自动的双向数据绑定</li><li><strong>重置/清除</strong>：标准化的表单操作方法</li></ul><h3 id="_6-样式和主题管理" tabindex="-1">6. <strong>样式和主题管理</strong> <a class="header-anchor" href="#_6-样式和主题管理" aria-label="Permalink to &quot;6. **样式和主题管理**&quot;">​</a></h3><h4 id="scss模块化" tabindex="-1"><strong>SCSS模块化</strong>： <a class="header-anchor" href="#scss模块化" aria-label="Permalink to &quot;**SCSS模块化**：&quot;">​</a></h4><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// table.scss - 组件专用样式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.n-form_header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 表单头部样式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.n-button_header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 按钮区域样式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="css类命名规范" tabindex="-1"><strong>CSS类命名规范</strong>： <a class="header-anchor" href="#css类命名规范" aria-label="Permalink to &quot;**CSS类命名规范**：&quot;">​</a></h4><ul><li>使用 <code>n-</code> 前缀标识自定义组件</li><li>采用BEM命名规范</li><li>支持条件样式类（如 <code>hide</code> 类）</li></ul><h3 id="_7-类型系统支撑" tabindex="-1">7. <strong>类型系统支撑</strong> <a class="header-anchor" href="#_7-类型系统支撑" aria-label="Permalink to &quot;7. **类型系统支撑**&quot;">​</a></h3><h4 id="完整的typescript支持" tabindex="-1"><strong>完整的TypeScript支持</strong>： <a class="header-anchor" href="#完整的typescript支持" aria-label="Permalink to &quot;**完整的TypeScript支持**：&quot;">​</a></h4><ul><li>详细的接口定义</li><li>泛型支持（如 <code>resOption&lt;T&gt;</code>）</li><li>严格的类型检查</li></ul><h3 id="_8-组件复用策略" tabindex="-1">8. <strong>组件复用策略</strong> <a class="header-anchor" href="#_8-组件复用策略" aria-label="Permalink to &quot;8. **组件复用策略**&quot;">​</a></h3><h4 id="组合优于继承" tabindex="-1"><strong>组合优于继承</strong>： <a class="header-anchor" href="#组合优于继承" aria-label="Permalink to &quot;**组合优于继承**：&quot;">​</a></h4><ul><li>页面组件通过组合基础组件实现</li><li>避免深层继承关系</li><li>保持组件的独立性和可测试性</li></ul><h4 id="配置化复用" tabindex="-1"><strong>配置化复用</strong>： <a class="header-anchor" href="#配置化复用" aria-label="Permalink to &quot;**配置化复用**：&quot;">​</a></h4><ul><li>通过配置对象实现同一组件的不同表现</li><li>支持运行时动态配置</li><li>减少重复代码</li></ul><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><p>这个项目的组件封装思路体现了<strong>现代前端架构的最佳实践</strong>：</p><ol><li><strong>分层清晰</strong>：从原子到分子到页面的递进式组件架构</li><li><strong>配置驱动</strong>：通过配置对象而非硬编码实现组件功能</li><li><strong>类型安全</strong>：完整的TypeScript类型系统</li><li><strong>业务抽象</strong>：将常见业务逻辑封装到组件内部</li><li><strong>灵活扩展</strong>：支持多种扩展方式满足特殊需求</li><li><strong>开发效率</strong>：大幅减少重复代码，提高开发效率</li></ol><p>这种封装方式特别适合<strong>企业级中后台系统</strong>，能够有效提升开发效率和代码维护性。</p><p>这个 <code>createForm.ts</code> 文件体现了一个非常经典的<strong>工厂模式</strong>封装思路，让我详细分析一下： Read file: components/common/nComponent/index.tsx</p><h2 id="二、createform-ts-文件的封装思路分析" tabindex="-1">二、<code>createForm.ts</code> 文件的封装思路分析 <a class="header-anchor" href="#二、createform-ts-文件的封装思路分析" aria-label="Permalink to &quot;二、\`createForm.ts\` 文件的封装思路分析&quot;">​</a></h2><h3 id="_1-工厂模式-factory-pattern-的实现" tabindex="-1">1. <strong>工厂模式（Factory Pattern）的实现</strong> <a class="header-anchor" href="#_1-工厂模式-factory-pattern-的实现" aria-label="Permalink to &quot;1. **工厂模式（Factory Pattern）的实现**&quot;">​</a></h3><p>这个文件是一个典型的<strong>组件工厂</strong>，它的核心思路是：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从实现文件导入所有渲染函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { renderInput, renderSelect, ... } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出一个工厂对象，将组件类型名映射到对应的渲染函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: renderInput,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  select: renderSelect,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  datePicker: renderDatePicker,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-设计模式的核心优势" tabindex="-1">2. <strong>设计模式的核心优势</strong> <a class="header-anchor" href="#_2-设计模式的核心优势" aria-label="Permalink to &quot;2. **设计模式的核心优势**&quot;">​</a></h3><h4 id="a-统一的组件创建接口" tabindex="-1"><strong>A. 统一的组件创建接口</strong> <a class="header-anchor" href="#a-统一的组件创建接口" aria-label="Permalink to &quot;**A. 统一的组件创建接口**&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用方式示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">createFn[item.componentType](item, modelObj)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 无论是什么组件类型，调用方式都一致：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">createFn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item, modelObj)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输入框</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">createFn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item, modelObj)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下拉框  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">createFn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item, modelObj)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按钮</span></span></code></pre></div><h4 id="b-消除条件分支" tabindex="-1"><strong>B. 消除条件分支</strong> <a class="header-anchor" href="#b-消除条件分支" aria-label="Permalink to &quot;**B. 消除条件分支**&quot;">​</a></h4><p>没有这个工厂模式，代码可能会是：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ 不好的方式 - 大量if/else或switch</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item.componentType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item, modelObj)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item.componentType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;select&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderSelect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item, modelObj)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item.componentType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item, modelObj)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... 更多条件判断</span></span></code></pre></div><p>有了工厂模式：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 好的方式 - 直接通过key获取</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> createFn[item.componentType](item, modelObj)</span></span></code></pre></div><h3 id="_3-架构分层的体现" tabindex="-1">3. <strong>架构分层的体现</strong> <a class="header-anchor" href="#_3-架构分层的体现" aria-label="Permalink to &quot;3. **架构分层的体现**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>index.tsx (实现层)  →  createForm.ts (抽象层)  →  业务组件 (使用层)</span></span>
<span class="line"><span>     ↓                      ↓                      ↓</span></span>
<span class="line"><span>  具体渲染逻辑           组件类型映射             配置化使用</span></span></code></pre></div><h4 id="实现层-index-tsx" tabindex="-1"><strong>实现层</strong>（index.tsx） <a class="header-anchor" href="#实现层-index-tsx" aria-label="Permalink to &quot;**实现层**（index.tsx）&quot;">​</a></h4><ul><li>包含具体的TSX渲染逻辑</li><li>处理props转换和事件绑定</li><li>专注于组件的具体实现</li></ul><h4 id="抽象层-createform-ts" tabindex="-1"><strong>抽象层</strong>（createForm.ts） <a class="header-anchor" href="#抽象层-createform-ts" aria-label="Permalink to &quot;**抽象层**（createForm.ts）&quot;">​</a></h4><ul><li>提供统一的访问接口</li><li>隐藏具体实现细节</li><li>作为实现层和使用层的桥梁</li></ul><h4 id="使用层-业务组件" tabindex="-1"><strong>使用层</strong>（业务组件） <a class="header-anchor" href="#使用层-业务组件" aria-label="Permalink to &quot;**使用层**（业务组件）&quot;">​</a></h4><ul><li>通过字符串类型名使用组件</li><li>无需知道具体的渲染函数名</li><li>支持配置驱动的动态渲染</li></ul><h3 id="_4-配置驱动设计的支撑" tabindex="-1">4. <strong>配置驱动设计的支撑</strong> <a class="header-anchor" href="#_4-配置驱动设计的支撑" aria-label="Permalink to &quot;4. **配置驱动设计的支撑**&quot;">​</a></h3><p>这个工厂使得配置驱动成为可能：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> formConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { componentType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bind: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;姓名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { componentType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;select&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bind: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;类型&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { componentType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;datePicker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bind: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;date&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;日期&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动态渲染</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> createFn[item.componentType](item, formData))</span></span></code></pre></div><h3 id="_5-扩展性设计" tabindex="-1">5. <strong>扩展性设计</strong> <a class="header-anchor" href="#_5-扩展性设计" aria-label="Permalink to &quot;5. **扩展性设计**&quot;">​</a></h3><h4 id="添加新组件类型极其简单" tabindex="-1"><strong>添加新组件类型极其简单</strong>： <a class="header-anchor" href="#添加新组件类型极其简单" aria-label="Permalink to &quot;**添加新组件类型极其简单**：&quot;">​</a></h4><ol><li>在 <code>index.tsx</code> 中实现新的渲染函数：</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderNewComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">modelObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 新组件的渲染逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { renderNewComponent }</span></span></code></pre></div><ol start="2"><li>在 <code>createForm.ts</code> 中注册：</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... 现有组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  newComponent: renderNewComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>立即可用：</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">componentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;newComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h3 id="_6-代码组织的思考" tabindex="-1">6. <strong>代码组织的思考</strong> <a class="header-anchor" href="#_6-代码组织的思考" aria-label="Permalink to &quot;6. **代码组织的思考**&quot;">​</a></h3><h4 id="职责分离" tabindex="-1"><strong>职责分离</strong>： <a class="header-anchor" href="#职责分离" aria-label="Permalink to &quot;**职责分离**：&quot;">​</a></h4><ul><li><strong><code>index.tsx</code></strong>：专注于&quot;如何渲染&quot;（How）</li><li><strong><code>createForm.ts</code></strong>：专注于&quot;什么类型对应什么渲染器&quot;（What）</li></ul><h4 id="依赖方向" tabindex="-1"><strong>依赖方向</strong>： <a class="header-anchor" href="#依赖方向" aria-label="Permalink to &quot;**依赖方向**：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>createForm.ts  依赖→  index.tsx</span></span>
<span class="line"><span>     ↑</span></span>
<span class="line"><span>   业务组件</span></span></code></pre></div><p>这种依赖方向确保了：</p><ul><li>实现细节的改变不影响使用方</li><li>新增组件类型时，使用方无需修改代码</li></ul><h3 id="_7-在项目中的实际应用" tabindex="-1">7. <strong>在项目中的实际应用</strong> <a class="header-anchor" href="#_7-在项目中的实际应用" aria-label="Permalink to &quot;7. **在项目中的实际应用**&quot;">​</a></h3><p>在表格组件中的使用：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// nTable/table.tsx 中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item.componentType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;searchBtn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderSearchBtn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> createFn[item.componentType](item, opt.params)</span></span></code></pre></div><p>这体现了工厂模式的价值：</p><ul><li><strong>一致性</strong>：所有组件都通过相同方式创建</li><li><strong>扩展性</strong>：添加新组件类型无需修改使用代码</li><li><strong>维护性</strong>：组件类型集中管理，便于维护</li></ul><h3 id="总结-1" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><p><code>createForm.ts</code> 的封装思路体现了<strong>现代前端架构的核心理念</strong>：</p><ol><li><strong>抽象胜于具体</strong>：通过抽象层隐藏实现细节</li><li><strong>配置胜于编码</strong>：支持配置驱动的组件使用方式</li><li><strong>组合胜于继承</strong>：通过组合渲染函数而非继承实现复用</li><li><strong>扩展胜于修改</strong>：新增功能时扩展而非修改现有代码</li></ol><p>这是一个<strong>小而美的设计模式应用</strong>，虽然代码量不大，但解决了组件系统中的核心问题，为整个组件库的可维护性和可扩展性奠定了基础。</p>`,99)]))}const c=i(l,[["render",e]]);export{g as __pageData,c as default};
