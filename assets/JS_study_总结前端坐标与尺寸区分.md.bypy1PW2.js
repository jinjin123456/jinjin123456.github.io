import{_ as e,o as t,c as l,R as a}from"./chunks/framework.RpFkmAtX.js";const o="/assets/可视区域.ONnzPdQk.png",i="/assets/尺寸说明.4TGop3jT.png",q=JSON.parse('{"title":"首先明确可视区，页面等区域范围","description":"","frontmatter":{},"headers":[],"relativePath":"JS/study/总结前端坐标与尺寸区分.md","filePath":"JS/study/总结前端坐标与尺寸区分.md"}'),r={name:"JS/study/总结前端坐标与尺寸区分.md"},s=a('<h1 id="首先明确可视区-页面等区域范围" tabindex="-1">首先明确可视区，页面等区域范围 <a class="header-anchor" href="#首先明确可视区-页面等区域范围" aria-label="Permalink to &quot;首先明确可视区，页面等区域范围&quot;">​</a></h1><p><img src="'+o+'" alt=""></p><blockquote><p>注意：这些获取元素宽高、距离、坐标的属性都是只读的，要想改变元素位置必须通过ele.style.left/ele.style.top属性来改变</p></blockquote><h1 id="offset系列" tabindex="-1">offset系列 <a class="header-anchor" href="#offset系列" aria-label="Permalink to &quot;offset系列&quot;">​</a></h1><h2 id="尺寸" tabindex="-1">尺寸 <a class="header-anchor" href="#尺寸" aria-label="Permalink to &quot;尺寸&quot;">​</a></h2><ul><li>offsetHeight：整个元素的高度，包括<strong>内容区、内边距、边框</strong></li><li>offsetWidth：整个元素的宽度，包括内容区、内边距、边框</li></ul><p><img src="'+i+'" alt="在这里插入图片描述"></p><h2 id="坐标" tabindex="-1">坐标 <a class="header-anchor" href="#坐标" aria-label="Permalink to &quot;坐标&quot;">​</a></h2><ul><li>event.offsetX/event.offsetY：以某个元素的左上角为坐标系原点(鼠标相对于事件源的X、Y坐标。只有IE支持）</li><li>offsetParent：当前元素的定位父元素。离当前元素最近的开启了定位的祖先元素，如果所有的元素都没有开启定位，则返回body</li><li>offsetLeft：水平偏移量</li><li>offsetTop：垂直偏移量</li></ul><blockquote><p>根据父元素是否脱离文档流(比如是否有绝定定位)，offsetLeft、offsetTop对齐的基准是不一样的。</p><blockquote><p>父元素脱离文档流：对齐父元素，自身最边缘（边框）到父级最左/最上端的距离 父元素没有脱离文档流：对齐浏览器，自身最边缘（边框）到客户区最左/最上端的距离</p></blockquote></blockquote><h1 id="client系列" tabindex="-1">client系列 <a class="header-anchor" href="#client系列" aria-label="Permalink to &quot;client系列&quot;">​</a></h1><h2 id="尺寸-1" tabindex="-1">尺寸 <a class="header-anchor" href="#尺寸-1" aria-label="Permalink to &quot;尺寸&quot;">​</a></h2><ul><li>clientHeight：元素的可见高度，指元素的<strong>内容区和内边距</strong>的高度</li><li>clientWidth：元素的可见宽度，指元素的内容区和内边距的宽度</li></ul><h2 id="坐标-1" tabindex="-1">坐标 <a class="header-anchor" href="#坐标-1" aria-label="Permalink to &quot;坐标&quot;">​</a></h2><ul><li>event.clientX/event.clientY：以可视区域左上角为坐标系原点(IE和标准事件都支持)</li></ul><h1 id="scorll系列" tabindex="-1">scorll系列 <a class="header-anchor" href="#scorll系列" aria-label="Permalink to &quot;scorll系列&quot;">​</a></h1><h2 id="尺寸-2" tabindex="-1">尺寸 <a class="header-anchor" href="#尺寸-2" aria-label="Permalink to &quot;尺寸&quot;">​</a></h2><ul><li>scrollHeight、scrollWidth：获取元素滚动区域的高度和宽度</li><li>scrollTop、scrollLeft： 获取元素垂直和水平滚动条滚动的距离</li></ul><blockquote><p>判断滚动条是否滚动到底 垂直滚动到底</p><blockquote><p>scrollHeight - scrollTop = clientHeight</p></blockquote><p>水平滚动到底</p><blockquote><p>scrollWidth - scrollLeft = clientWidth</p></blockquote></blockquote><h1 id="document-算是个特殊元素" tabindex="-1">document(算是个特殊元素) <a class="header-anchor" href="#document-算是个特殊元素" aria-label="Permalink to &quot;document(算是个特殊元素)&quot;">​</a></h1><h2 id="尺寸-3" tabindex="-1">尺寸 <a class="header-anchor" href="#尺寸-3" aria-label="Permalink to &quot;尺寸&quot;">​</a></h2><ul><li>document 特殊元素，通常情况下，我们只需要获取到页面的尺寸即可，页面的位置在实际开发中基本上用不上。我们获取页面的尺寸也是和元素获取尺寸时候一样，通过上面几个属性值获取。 例如：==document.body==.clientWidth; document.body.clientHeight;</li></ul><h2 id="坐标-2" tabindex="-1">坐标 <a class="header-anchor" href="#坐标-2" aria-label="Permalink to &quot;坐标&quot;">​</a></h2><ul><li>event.pageX/event.pageY：以页面左上角为坐标系原点(IE不支持)</li></ul><h1 id="相关补充" tabindex="-1">相关补充 <a class="header-anchor" href="#相关补充" aria-label="Permalink to &quot;相关补充&quot;">​</a></h1><h2 id="关于left和top的原点问题" tabindex="-1">关于left和top的原点问题 <a class="header-anchor" href="#关于left和top的原点问题" aria-label="Permalink to &quot;关于left和top的原点问题&quot;">​</a></h2><ul><li>父元素是relative，当前元素是absolute，则当前元素left和top的基准是最近的relative的父元素。</li><li>当前元素是relative，则当前元素的left和top的基准当前元素的原始位置。</li><li>当前元素是fixed，则当前元素的left和top的基准是可视区域。</li></ul><h2 id="jquery中对应的尺寸位置方法-读写合一" tabindex="-1">jQuery中对应的尺寸位置方法(读写合一) <a class="header-anchor" href="#jquery中对应的尺寸位置方法-读写合一" aria-label="Permalink to &quot;jQuery中对应的尺寸位置方法(读写合一)&quot;">​</a></h2><ul><li>元素的尺寸大小 --<strong>width(),heigth()</strong>:获取jQuery对象的宽度和高度，可以通过width()和height()，这二者获取到的是元素通过css设置的width和height，不包括元素的内边距，边框和外边距。 --<strong>innerWidth()和innerHeight()</strong>：这两个方法可以获取到元素的尺寸，包括内边距 --<strong>outerWidth()和outerHeight()</strong>：这两个方法可以获取到元素的尺寸，包括内边距和边框</li><li>元素的位置 jQuery对象有了两个关于元素的位置的方法，offset()和position()，这两个方法都返回两个属性值，top和left。这两个方法都是只对==可见元素==有效。 --<strong>offset()</strong>：offset()方法是返回元素相对于==文档==的偏移位置。 --<strong>position()</strong>：position()方法是返回元素相对于==父元素==的偏移位置。</li><li>滚动条相关 --<strong>scrollTop()和scrollLeft()</strong>，这两个方法既可以获取当前滚动条的位置也可以设置滚动条的位置。主要从有==溢出区域的元素==滚动条的位置和==页面滚动条==的位置这两方面进行设置。</li></ul><p>参考博客 <a href="https://blog.csdn.net/dbqrwim6112/article/details/101654617" target="_blank" rel="noreferrer">web前端开发中常用的尺寸和位置</a><a href="https://blog.csdn.net/yi_xuan_sky/article/details/81607218" target="_blank" rel="noreferrer">js三大系列和鼠标坐标--笔记（五）</a></p>',30),n=[s];function h(c,d,u,f,p,b){return t(),l("div",null,n)}const g=e(r,[["render",h]]);export{q as __pageData,g as default};
